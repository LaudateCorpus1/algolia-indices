[
  {
    "name": "will-finish-launching",
    "description": "Emitted when the application has finished basic startup. On Windows and Linux, the will-finish-launching event is the same as the ready event; on macOS, this event represents the applicationWillFinishLaunching notification of NSApplication. You would usually set up listeners for the open-file and open-url events here, and start the crash reporter and auto updater. In most cases, you should just do everything in the ready event handler.",
    "title": "app.on('will-finish-launching')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-will-finish-launching",
    "tldr": "Emitted when the application has finished basic startup."
  },
  {
    "name": "ready",
    "description": "Emitted when Electron has finished initializing. On macOS, launchInfo holds the userInfo of the NSUserNotification that was used to open the application, if it was launched from Notification Center. You can call app.isReady() to check if this event has already fired.",
    "returns": [
      {
        "name": "launchInfo",
        "type": "Object",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('ready')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-ready",
    "tldr": "Emitted when Electron has finished initializing."
  },
  {
    "name": "window-all-closed",
    "description": "Emitted when all windows have been closed. If you do not subscribe to this event and all windows are closed, the default behavior is to quit the app; however, if you subscribe, you control whether the app quits or not. If the user pressed Cmd + Q, or the developer called app.quit(), Electron will first try to close all the windows and then emit the will-quit event, and in this case the window-all-closed event would not be emitted.",
    "title": "app.on('window-all-closed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-window-all-closed",
    "tldr": "Emitted when all windows have been closed."
  },
  {
    "name": "before-quit",
    "description": "Emitted before the application starts closing its windows. Calling event.preventDefault() will prevent the default behaviour, which is terminating the application. Note: If application quit was initiated by autoUpdater.quitAndInstall() then before-quit is emitted after emitting close event on all windows and closing them.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('before-quit')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-before-quit",
    "tldr": "Emitted before the application starts closing its windows."
  },
  {
    "name": "will-quit",
    "description": "Emitted when all windows have been closed and the application will quit. Calling event.preventDefault() will prevent the default behaviour, which is terminating the application. See the description of the window-all-closed event for the differences between the will-quit and window-all-closed events.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('will-quit')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-will-quit",
    "tldr": "Emitted when all windows have been closed and the application will quit."
  },
  {
    "name": "quit",
    "description": "Emitted when the application is quitting.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "exitCode",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('quit')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-quit",
    "tldr": "Emitted when the application is quitting.."
  },
  {
    "name": "open-file",
    "description": "Emitted when the user wants to open a file with the application. The open-file event is usually emitted when the application is already open and the OS wants to reuse the application to open the file. open-file is also emitted when a file is dropped onto the dock and the application is not yet running. Make sure to listen for the open-file event very early in your application startup to handle this case (even before the ready event is emitted). You should call event.preventDefault() if you want to handle this event. On Windows, you have to parse process.argv (in the main process) to get the filepath.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "path",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('open-file')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-open-file",
    "tldr": "Emitted when the user wants to open a file with the application."
  },
  {
    "name": "open-url",
    "description": "Emitted when the user wants to open a URL with the application. Your application's Info.plist file must define the url scheme within the CFBundleURLTypes key, and set NSPrincipalClass to AtomApplication. You should call event.preventDefault() if you want to handle this event.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('open-url')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-open-url",
    "tldr": "Emitted when the user wants to open a URL with the application."
  },
  {
    "name": "activate",
    "description": "Emitted when the application is activated. Various actions can trigger this event, such as launching the application for the first time, attempting to re-launch the application when it's already running, or clicking on the application's dock or taskbar icon.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "hasVisibleWindows",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('activate')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-activate",
    "tldr": "Emitted when the application is activated."
  },
  {
    "name": "continue-activity",
    "description": "Emitted during Handoff when an activity from a different device wants to be resumed. You should call event.preventDefault() if you want to handle this event. A user activity can be continued only in an app that has the same developer Team ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's Info.plist under the NSUserActivityTypes key.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "type",
        "type": "String",
        "collection": false,
        "description": "A string identifying the activity. Maps to .",
        "required": true
      },
      {
        "name": "userInfo",
        "type": "Object",
        "collection": false,
        "description": "Contains app-specific state stored by the activity on another device.",
        "required": true
      }
    ],
    "title": "app.on('continue-activity')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-continue-activity",
    "tldr": "Emitted during Handoff when an activity from a different device wants to be resumed."
  },
  {
    "name": "will-continue-activity",
    "description": "Emitted during Handoff before an activity from a different device wants to be resumed. You should call event.preventDefault() if you want to handle this event.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "type",
        "type": "String",
        "collection": false,
        "description": "A string identifying the activity. Maps to .",
        "required": true
      }
    ],
    "title": "app.on('will-continue-activity')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-will-continue-activity",
    "tldr": "Emitted during Handoff before an activity from a different device wants to be resumed."
  },
  {
    "name": "continue-activity-error",
    "description": "Emitted during Handoff when an activity from a different device fails to be resumed.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "type",
        "type": "String",
        "collection": false,
        "description": "A string identifying the activity. Maps to .",
        "required": true
      },
      {
        "name": "error",
        "type": "String",
        "collection": false,
        "description": "A string with the error's localized description.",
        "required": true
      }
    ],
    "title": "app.on('continue-activity-error')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-continue-activity-error",
    "tldr": "Emitted during Handoff when an activity from a different device fails to be resumed.."
  },
  {
    "name": "activity-was-continued",
    "description": "Emitted during Handoff after an activity from this device was successfully resumed on another one.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "type",
        "type": "String",
        "collection": false,
        "description": "A string identifying the activity. Maps to .",
        "required": true
      },
      {
        "name": "userInfo",
        "type": "Object",
        "collection": false,
        "description": "Contains app-specific state stored by the activity.",
        "required": true
      }
    ],
    "title": "app.on('activity-was-continued')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-activity-was-continued",
    "tldr": "Emitted during Handoff after an activity from this device was successfully resumed on another one.."
  },
  {
    "name": "update-activity-state",
    "description": "Emitted when Handoff is about to be resumed on another device. If you need to update the state to be transferred, you should call event.preventDefault() immediately, construct a new userInfo dictionary and call app.updateCurrentActiviy() in a timely manner. Otherwise the operation will fail and continue-activity-error will be called.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "type",
        "type": "String",
        "collection": false,
        "description": "A string identifying the activity. Maps to .",
        "required": true
      },
      {
        "name": "userInfo",
        "type": "Object",
        "collection": false,
        "description": "Contains app-specific state stored by the activity.",
        "required": true
      }
    ],
    "title": "app.on('update-activity-state')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-update-activity-state",
    "tldr": "Emitted when Handoff is about to be resumed on another device."
  },
  {
    "name": "new-window-for-tab",
    "description": "Emitted when the user clicks the native macOS new tab button. The new tab button is only visible if the current BrowserWindow has a tabbingIdentifier",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('new-window-for-tab')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-new-window-for-tab",
    "tldr": "Emitted when the user clicks the native macOS new tab button."
  },
  {
    "name": "browser-window-blur",
    "description": "Emitted when a browserWindow gets blurred.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "window",
        "type": "BrowserWindow",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('browser-window-blur')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-browser-window-blur",
    "tldr": "Emitted when a browserWindow gets blurred.."
  },
  {
    "name": "browser-window-focus",
    "description": "Emitted when a browserWindow gets focused.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "window",
        "type": "BrowserWindow",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('browser-window-focus')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-browser-window-focus",
    "tldr": "Emitted when a browserWindow gets focused.."
  },
  {
    "name": "browser-window-created",
    "description": "Emitted when a new browserWindow is created.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "window",
        "type": "BrowserWindow",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('browser-window-created')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-browser-window-created",
    "tldr": "Emitted when a new browserWindow is created.."
  },
  {
    "name": "web-contents-created",
    "description": "Emitted when a new webContents is created.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "webContents",
        "type": "WebContents",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('web-contents-created')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-web-contents-created",
    "tldr": "Emitted when a new webContents is created.."
  },
  {
    "name": "certificate-error",
    "description": "Emitted when failed to verify the certificate for url, to trust the certificate you should prevent the default behavior with event.preventDefault() and call callback(true).",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "webContents",
        "type": "WebContents",
        "collection": false,
        "required": true
      },
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "error",
        "type": "String",
        "collection": false,
        "description": "The error code",
        "required": true
      },
      {
        "name": "certificate",
        "type": "Certificate",
        "collection": false,
        "required": true
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "isTrusted",
            "type": "Boolean",
            "collection": false,
            "description": "Whether to consider the certificate as trusted",
            "required": true
          }
        ]
      }
    ],
    "title": "app.on('certificate-error')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-certificate-error",
    "tldr": "Emitted when failed to verify the certificate for url, to trust the certificate you should prevent the default behavior with event.preventDefault() and call callback(true).."
  },
  {
    "name": "select-client-certificate",
    "description": "Emitted when a client certificate is requested. The url corresponds to the navigation entry requesting the client certificate and callback can be called with an entry filtered from the list. Using event.preventDefault() prevents the application from using the first certificate from the store.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "webContents",
        "type": "WebContents",
        "collection": false,
        "required": true
      },
      {
        "name": "url",
        "type": "URL",
        "collection": false,
        "required": true
      },
      {
        "name": "certificateList",
        "type": "Certificate",
        "collection": true,
        "required": true
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "certificate",
            "type": "Certificate",
            "collection": false,
            "description": "",
            "required": false
          }
        ]
      }
    ],
    "title": "app.on('select-client-certificate')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-select-client-certificate",
    "tldr": "Emitted when a client certificate is requested."
  },
  {
    "name": "login",
    "description": "Emitted when webContents wants to do basic auth. The default behavior is to cancel all authentications, to override this you should prevent the default behavior with event.preventDefault() and call callback(username, password) with the credentials.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "webContents",
        "type": "WebContents",
        "collection": false,
        "required": true
      },
      {
        "name": "request",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "method",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "url",
            "type": "URL",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "referrer",
            "type": "URL",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      },
      {
        "name": "authInfo",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "isProxy",
            "type": "Boolean",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "scheme",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "host",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "port",
            "type": "Integer",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "realm",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "username",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "password",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "app.on('login')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-login",
    "tldr": "Emitted when webContents wants to do basic auth."
  },
  {
    "name": "gpu-process-crashed",
    "description": "Emitted when the gpu process crashes or is killed.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "killed",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "app.on('gpu-process-crashed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-gpu-process-crashed",
    "tldr": "Emitted when the gpu process crashes or is killed.."
  },
  {
    "name": "accessibility-support-changed",
    "description": "Emitted when Chrome's accessibility support changes. This event fires when assistive technologies, such as screen readers, are enabled or disabled. See https://www.chromium.org/developers/design-documents/accessibility for more details.",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "accessibilitySupportEnabled",
        "type": "Boolean",
        "collection": false,
        "description": "`true` when Chrome's accessibility support is enabled, `false` otherwise.",
        "required": true
      }
    ],
    "title": "app.on('accessibility-support-changed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/app#event-accessibility-support-changed",
    "tldr": "Emitted when Chrome's accessibility support changes."
  },
  {
    "name": "error",
    "description": "Emitted when there is an error while updating.",
    "returns": [
      {
        "name": "error",
        "type": "Error",
        "collection": false,
        "required": true
      }
    ],
    "title": "autoUpdater.on('error')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/auto-updater#event-error",
    "tldr": "Emitted when there is an error while updating.."
  },
  {
    "name": "checking-for-update",
    "description": "Emitted when checking if an update has started.",
    "title": "autoUpdater.on('checking-for-update')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/auto-updater#event-checking-for-update",
    "tldr": "Emitted when checking if an update has started.."
  },
  {
    "name": "update-available",
    "description": "Emitted when there is an available update. The update is downloaded automatically.",
    "title": "autoUpdater.on('update-available')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/auto-updater#event-update-available",
    "tldr": "Emitted when there is an available update."
  },
  {
    "name": "update-not-available",
    "description": "Emitted when there is no available update.",
    "title": "autoUpdater.on('update-not-available')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/auto-updater#event-update-not-available",
    "tldr": "Emitted when there is no available update.."
  },
  {
    "name": "update-downloaded",
    "description": "Emitted when an update has been downloaded. On Windows only releaseName is available.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "releaseNotes",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "releaseName",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "releaseDate",
        "type": "Date",
        "collection": false,
        "required": true
      },
      {
        "name": "updateURL",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "autoUpdater.on('update-downloaded')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/auto-updater#event-update-downloaded",
    "tldr": "Emitted when an update has been downloaded."
  },
  {
    "name": "getAllViews",
    "returns": {
      "type": "BrowserView",
      "collection": true,
      "description": "An array of all opened BrowserViews."
    },
    "title": "BrowserView.getAllViews()",
    "type": "staticMethod",
    "tldr": "Returns an array of all opened BrowserViews.",
    "url": "https://electronjs.org/docs/api/browser-view#browser-viewgetallviews"
  },
  {
    "name": "fromWebContents",
    "parameters": [
      {
        "name": "webContents",
        "type": "WebContents",
        "collection": false,
        "required": true
      }
    ],
    "returns": {
      "type": [
        {
          "typeName": "BrowserView",
          "collection": false
        },
        {
          "typeName": "null",
          "collection": false
        }
      ],
      "collection": false,
      "description": "The BrowserView that owns the given webContents or null if the contents are not owned by a BrowserView."
    },
    "title": "BrowserView.fromWebContents(webContents)",
    "type": "staticMethod",
    "tldr": "Returns the BrowserView that owns the given webContents or null if the contents are not owned by a BrowserView.",
    "url": "https://electronjs.org/docs/api/browser-view#browser-viewfromwebcontents"
  },
  {
    "name": "fromId",
    "parameters": [
      {
        "name": "id",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "returns": {
      "type": "BrowserView",
      "collection": false,
      "description": "The view with the given id."
    },
    "title": "BrowserView.fromId(id)",
    "type": "staticMethod",
    "tldr": "Returns the view with the given id.",
    "url": "https://electronjs.org/docs/api/browser-view#browser-viewfromid"
  },
  {
    "name": "destroy",
    "description": "Force closing the view, the unload and beforeunload events won't be emitted for the web page. After you're done with a view, call this function in order to free memory and other resources as soon as possible.",
    "title": "view.destroy()",
    "type": "instanceMethod",
    "tldr": "Force closing the view, the unload and beforeunload events won't be emitted for the web page."
  },
  {
    "name": "isDestroyed",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the view is destroyed."
    },
    "title": "view.isDestroyed()",
    "type": "instanceMethod",
    "tldr": "Returns whether the view is destroyed."
  },
  {
    "name": "setAutoResize",
    "platforms": [
      "Experimental"
    ],
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "width",
            "type": "Boolean",
            "collection": false,
            "description": "If true, the view's width will grow and shrink together with the window. false by default.",
            "required": true
          },
          {
            "name": "height",
            "type": "Boolean",
            "collection": false,
            "description": "If true, the view's height will grow and shrink together with the window. false by default.",
            "required": true
          }
        ]
      }
    ],
    "title": "view.setAutoResize(options)",
    "type": "instanceMethod",
    "tldr": null
  },
  {
    "name": "setBounds",
    "platforms": [
      "Experimental"
    ],
    "description": "Resizes and moves the view to the supplied bounds relative to the window.",
    "parameters": [
      {
        "name": "bounds",
        "type": "Rectangle",
        "collection": false,
        "required": true
      }
    ],
    "title": "view.setBounds(bounds)",
    "type": "instanceMethod",
    "tldr": "Resizes and moves the view to the supplied bounds relative to the window.."
  },
  {
    "name": "setBackgroundColor",
    "platforms": [
      "Experimental"
    ],
    "parameters": [
      {
        "name": "color",
        "type": "String",
        "collection": false,
        "description": "Color in `#aarrggbb` or `#argb` form. The alpha channel is optional.",
        "required": true
      }
    ],
    "title": "view.setBackgroundColor(color)",
    "type": "instanceMethod",
    "tldr": null
  },
  {
    "name": "getAllWindows",
    "returns": {
      "type": "BrowserWindow",
      "collection": true,
      "description": "An array of all opened browser windows."
    },
    "title": "BrowserWindow.getAllWindows()",
    "type": "staticMethod",
    "tldr": "Returns an array of all opened browser windows.",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowgetallwindows"
  },
  {
    "name": "getFocusedWindow",
    "returns": {
      "type": "BrowserWindow",
      "collection": false,
      "description": "The window that is focused in this application, otherwise returns null."
    },
    "title": "BrowserWindow.getFocusedWindow()",
    "type": "staticMethod",
    "tldr": "Returns the window that is focused in this application, otherwise returns null.",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowgetfocusedwindow"
  },
  {
    "name": "fromWebContents",
    "parameters": [
      {
        "name": "webContents",
        "type": "WebContents",
        "collection": false,
        "required": true
      }
    ],
    "returns": {
      "type": "BrowserWindow",
      "collection": false,
      "description": "The window that owns the given webContents."
    },
    "title": "BrowserWindow.fromWebContents(webContents)",
    "type": "staticMethod",
    "tldr": "Returns the window that owns the given webContents.",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowfromwebcontents"
  },
  {
    "name": "fromBrowserView",
    "parameters": [
      {
        "name": "browserView",
        "type": "BrowserView",
        "collection": false,
        "required": true
      }
    ],
    "returns": {
      "type": [
        {
          "typeName": "BrowserWindow",
          "collection": false
        },
        {
          "typeName": "null",
          "collection": false
        }
      ],
      "collection": false,
      "description": "The window that owns the given browserView. If the given view is not attached to any window, returns null."
    },
    "title": "BrowserWindow.fromBrowserView(browserView)",
    "type": "staticMethod",
    "tldr": "Returns the window that owns the given browserView. If the given view is not attached to any window, returns null.",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowfrombrowserview"
  },
  {
    "name": "fromId",
    "parameters": [
      {
        "name": "id",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "returns": {
      "type": "BrowserWindow",
      "collection": false,
      "description": "The window with the given id."
    },
    "title": "BrowserWindow.fromId(id)",
    "type": "staticMethod",
    "tldr": "Returns the window with the given id.",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowfromid"
  },
  {
    "name": "addExtension",
    "description": "Adds Chrome extension located at path, and returns extension's name. The method will also not return if the extension's manifest is missing or incomplete. Note: This API cannot be called before the ready event of the app module is emitted.",
    "parameters": [
      {
        "name": "path",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "BrowserWindow.addExtension(path)",
    "type": "staticMethod",
    "tldr": "Adds Chrome extension located at path, and returns extension's name.",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowaddextension"
  },
  {
    "name": "removeExtension",
    "description": "Remove a Chrome extension by name. Note: This API cannot be called before the ready event of the app module is emitted.",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "BrowserWindow.removeExtension(name)",
    "type": "staticMethod",
    "tldr": "Remove a Chrome extension by name.",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowremoveextension"
  },
  {
    "name": "getExtensions",
    "description": "Note: This API cannot be called before the ready event of the app module is emitted.",
    "returns": {
      "type": "Object",
      "collection": false,
      "description": "The keys are the extension names and each value is an Object containing name and version properties."
    },
    "title": "BrowserWindow.getExtensions()",
    "type": "staticMethod",
    "tldr": "Note: This API cannot be called before the ready event of the app module is emitted..",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowgetextensions"
  },
  {
    "name": "addDevToolsExtension",
    "description": "Adds DevTools extension located at path, and returns extension's name. The extension will be remembered so you only need to call this API once, this API is not for programming use. If you try to add an extension that has already been loaded, this method will not return and instead log a warning to the console. The method will also not return if the extension's manifest is missing or incomplete. Note: This API cannot be called before the ready event of the app module is emitted.",
    "parameters": [
      {
        "name": "path",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "BrowserWindow.addDevToolsExtension(path)",
    "type": "staticMethod",
    "tldr": "Adds DevTools extension located at path, and returns extension's name.",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowadddevtoolsextension"
  },
  {
    "name": "removeDevToolsExtension",
    "description": "Remove a DevTools extension by name. Note: This API cannot be called before the ready event of the app module is emitted.",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "BrowserWindow.removeDevToolsExtension(name)",
    "type": "staticMethod",
    "tldr": "Remove a DevTools extension by name.",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowremovedevtoolsextension"
  },
  {
    "name": "getDevToolsExtensions",
    "description": "To check if a DevTools extension is installed you can run the following: Note: This API cannot be called before the ready event of the app module is emitted.",
    "returns": {
      "type": "Object",
      "collection": false,
      "description": "The keys are the extension names and each value is an Object containing name and version properties."
    },
    "title": "BrowserWindow.getDevToolsExtensions()",
    "type": "staticMethod",
    "tldr": "To check if a DevTools extension is installed you can run the following: Note: This API cannot be called before the ready event of the app module is emitted..",
    "url": "https://electronjs.org/docs/api/browser-window#browser-windowgetdevtoolsextensions"
  },
  {
    "name": "destroy",
    "description": "Force closing the window, the unload and beforeunload event won't be emitted for the web page, and close event will also not be emitted for this window, but it guarantees the closed event will be emitted.",
    "title": "win.destroy()",
    "type": "instanceMethod",
    "tldr": "Force closing the window, the unload and beforeunload event won't be emitted for the web page, and close event will also not be emitted for this window, but it guarantees the closed event will be emitted.."
  },
  {
    "name": "close",
    "description": "Try to close the window. This has the same effect as a user manually clicking the close button of the window. The web page may cancel the close though. See the close event.",
    "title": "win.close()",
    "type": "instanceMethod",
    "tldr": "Try to close the window."
  },
  {
    "name": "focus",
    "description": "Focuses on the window.",
    "title": "win.focus()",
    "type": "instanceMethod",
    "tldr": "Focuses on the window.."
  },
  {
    "name": "blur",
    "description": "Removes focus from the window.",
    "title": "win.blur()",
    "type": "instanceMethod",
    "tldr": "Removes focus from the window.."
  },
  {
    "name": "isFocused",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window is focused."
    },
    "title": "win.isFocused()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window is focused."
  },
  {
    "name": "isDestroyed",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window is destroyed."
    },
    "title": "win.isDestroyed()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window is destroyed."
  },
  {
    "name": "show",
    "description": "Shows and gives focus to the window.",
    "title": "win.show()",
    "type": "instanceMethod",
    "tldr": "Shows and gives focus to the window.."
  },
  {
    "name": "showInactive",
    "description": "Shows the window but doesn't focus on it.",
    "title": "win.showInactive()",
    "type": "instanceMethod",
    "tldr": "Shows the window but doesn't focus on it.."
  },
  {
    "name": "hide",
    "description": "Hides the window.",
    "title": "win.hide()",
    "type": "instanceMethod",
    "tldr": "Hides the window.."
  },
  {
    "name": "isVisible",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window is visible to the user."
    },
    "title": "win.isVisible()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window is visible to the user."
  },
  {
    "name": "isModal",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether current window is a modal window."
    },
    "title": "win.isModal()",
    "type": "instanceMethod",
    "tldr": "Returns whether current window is a modal window."
  },
  {
    "name": "maximize",
    "description": "Maximizes the window. This will also show (but not focus) the window if it isn't being displayed already.",
    "title": "win.maximize()",
    "type": "instanceMethod",
    "tldr": "Maximizes the window."
  },
  {
    "name": "unmaximize",
    "description": "Unmaximizes the window.",
    "title": "win.unmaximize()",
    "type": "instanceMethod",
    "tldr": "Unmaximizes the window.."
  },
  {
    "name": "isMaximized",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window is maximized."
    },
    "title": "win.isMaximized()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window is maximized."
  },
  {
    "name": "minimize",
    "description": "Minimizes the window. On some platforms the minimized window will be shown in the Dock.",
    "title": "win.minimize()",
    "type": "instanceMethod",
    "tldr": "Minimizes the window."
  },
  {
    "name": "restore",
    "description": "Restores the window from minimized state to its previous state.",
    "title": "win.restore()",
    "type": "instanceMethod",
    "tldr": "Restores the window from minimized state to its previous state.."
  },
  {
    "name": "isMinimized",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window is minimized."
    },
    "title": "win.isMinimized()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window is minimized."
  },
  {
    "name": "setFullScreen",
    "description": "Sets whether the window should be in fullscreen mode.",
    "parameters": [
      {
        "name": "flag",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setFullScreen(flag)",
    "type": "instanceMethod",
    "tldr": "Sets whether the window should be in fullscreen mode.."
  },
  {
    "name": "isFullScreen",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window is in fullscreen mode."
    },
    "title": "win.isFullScreen()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window is in fullscreen mode."
  },
  {
    "name": "setSimpleFullScreen",
    "platforms": [
      "macOS"
    ],
    "description": "Enters or leaves simple fullscreen mode. Simple fullscreen mode emulates the native fullscreen behavior found in versions of Mac OS X prior to Lion (10.7).",
    "parameters": [
      {
        "name": "flag",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setSimpleFullScreen(flag)",
    "type": "instanceMethod",
    "tldr": "Enters or leaves simple fullscreen mode."
  },
  {
    "name": "isSimpleFullScreen",
    "platforms": [
      "macOS"
    ],
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window is in simple (pre-Lion) fullscreen mode."
    },
    "title": "win.isSimpleFullScreen()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window is in simple (pre-Lion) fullscreen mode."
  },
  {
    "name": "setAspectRatio",
    "platforms": [
      "macOS"
    ],
    "description": "This will make a window maintain an aspect ratio. The extra size allows a developer to have space, specified in pixels, not included within the aspect ratio calculations. This API already takes into account the difference between a window's size and its content size. Consider a normal window with an HD video player and associated controls. Perhaps there are 15 pixels of controls on the left edge, 25 pixels of controls on the right edge and 50 pixels of controls below the player. In order to maintain a 16:9 aspect ratio (standard aspect ratio for HD @1920x1080) within the player itself we would call this function with arguments of 16/9 and [ 40, 50 ]. The second argument doesn't care where the extra width and height are within the content view--only that they exist. Just sum any extra width and height areas you have within the overall content view.",
    "parameters": [
      {
        "name": "aspectRatio",
        "type": "Float",
        "collection": false,
        "description": "The aspect ratio to maintain for some portion of the content view.",
        "required": true
      },
      {
        "name": "extraSize",
        "type": "Size",
        "collection": false,
        "description": "The extra size not to be included while maintaining the aspect ratio.",
        "required": true
      }
    ],
    "title": "win.setAspectRatio(aspectRatio[, extraSize])",
    "type": "instanceMethod",
    "tldr": "This will make a window maintain an aspect ratio."
  },
  {
    "name": "previewFile",
    "platforms": [
      "macOS"
    ],
    "description": "Uses Quick Look to preview a file at a given path.",
    "parameters": [
      {
        "name": "path",
        "type": "String",
        "collection": false,
        "description": "The absolute path to the file to preview with QuickLook. This is important as Quick Look uses the file name and file extension on the path to determine the content type of the file to open.",
        "required": true
      },
      {
        "name": "displayName",
        "type": "String",
        "collection": false,
        "description": "The name of the file to display on the Quick Look modal view. This is purely visual and does not affect the content type of the file. Defaults to `path`.",
        "required": false
      }
    ],
    "title": "win.previewFile(path[, displayName])",
    "type": "instanceMethod",
    "tldr": "Uses Quick Look to preview a file at a given path.."
  },
  {
    "name": "closeFilePreview",
    "platforms": [
      "macOS"
    ],
    "description": "Closes the currently open Quick Look panel.",
    "title": "win.closeFilePreview()",
    "type": "instanceMethod",
    "tldr": "Closes the currently open Quick Look panel.."
  },
  {
    "name": "setBounds",
    "description": "Resizes and moves the window to the supplied bounds",
    "parameters": [
      {
        "name": "bounds",
        "type": "Rectangle",
        "collection": false,
        "required": true
      },
      {
        "name": "animate",
        "type": "Boolean",
        "collection": false,
        "required": false
      }
    ],
    "title": "win.setBounds(bounds[, animate])",
    "type": "instanceMethod",
    "tldr": "Resizes and moves the window to the supplied bounds."
  },
  {
    "name": "getBounds",
    "returns": {
      "type": "Rectangle",
      "collection": false
    },
    "title": "win.getBounds()",
    "type": "instanceMethod",
    "tldr": null
  },
  {
    "name": "setContentBounds",
    "description": "Resizes and moves the window's client area (e.g. the web page) to the supplied bounds.",
    "parameters": [
      {
        "name": "bounds",
        "type": "Rectangle",
        "collection": false,
        "required": true
      },
      {
        "name": "animate",
        "type": "Boolean",
        "collection": false,
        "required": false
      }
    ],
    "title": "win.setContentBounds(bounds[, animate])",
    "type": "instanceMethod",
    "tldr": "Resizes and moves the window's client area (e.g."
  },
  {
    "name": "getContentBounds",
    "returns": {
      "type": "Rectangle",
      "collection": false
    },
    "title": "win.getContentBounds()",
    "type": "instanceMethod",
    "tldr": null
  },
  {
    "name": "setEnabled",
    "description": "Disable or enable the window.",
    "parameters": [
      {
        "name": "enable",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setEnabled(enable)",
    "type": "instanceMethod",
    "tldr": "Disable or enable the window.."
  },
  {
    "name": "setSize",
    "description": "Resizes the window to width and height.",
    "parameters": [
      {
        "name": "width",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "height",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "animate",
        "type": "Boolean",
        "collection": false,
        "required": false
      }
    ],
    "title": "win.setSize(width, height[, animate])",
    "type": "instanceMethod",
    "tldr": "Resizes the window to width and height.."
  },
  {
    "name": "getSize",
    "returns": {
      "type": "Integer",
      "collection": true,
      "description": "Contains the window's width and height."
    },
    "title": "win.getSize()",
    "type": "instanceMethod",
    "tldr": "Returns contains the window's width and height."
  },
  {
    "name": "setContentSize",
    "description": "Resizes the window's client area (e.g. the web page) to width and height.",
    "parameters": [
      {
        "name": "width",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "height",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "animate",
        "type": "Boolean",
        "collection": false,
        "required": false
      }
    ],
    "title": "win.setContentSize(width, height[, animate])",
    "type": "instanceMethod",
    "tldr": "Resizes the window's client area (e.g."
  },
  {
    "name": "getContentSize",
    "returns": {
      "type": "Integer",
      "collection": true,
      "description": "Contains the window's client area's width and height."
    },
    "title": "win.getContentSize()",
    "type": "instanceMethod",
    "tldr": "Returns contains the window's client area's width and height."
  },
  {
    "name": "setMinimumSize",
    "description": "Sets the minimum size of window to width and height.",
    "parameters": [
      {
        "name": "width",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "height",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setMinimumSize(width, height)",
    "type": "instanceMethod",
    "tldr": "Sets the minimum size of window to width and height.."
  },
  {
    "name": "getMinimumSize",
    "returns": {
      "type": "Integer",
      "collection": true,
      "description": "Contains the window's minimum width and height."
    },
    "title": "win.getMinimumSize()",
    "type": "instanceMethod",
    "tldr": "Returns contains the window's minimum width and height."
  },
  {
    "name": "setMaximumSize",
    "description": "Sets the maximum size of window to width and height.",
    "parameters": [
      {
        "name": "width",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "height",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setMaximumSize(width, height)",
    "type": "instanceMethod",
    "tldr": "Sets the maximum size of window to width and height.."
  },
  {
    "name": "getMaximumSize",
    "returns": {
      "type": "Integer",
      "collection": true,
      "description": "Contains the window's maximum width and height."
    },
    "title": "win.getMaximumSize()",
    "type": "instanceMethod",
    "tldr": "Returns contains the window's maximum width and height."
  },
  {
    "name": "setResizable",
    "description": "Sets whether the window can be manually resized by user.",
    "parameters": [
      {
        "name": "resizable",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setResizable(resizable)",
    "type": "instanceMethod",
    "tldr": "Sets whether the window can be manually resized by user.."
  },
  {
    "name": "isResizable",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window can be manually resized by user."
    },
    "title": "win.isResizable()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window can be manually resized by user."
  },
  {
    "name": "setMovable",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "Sets whether the window can be moved by user. On Linux does nothing.",
    "parameters": [
      {
        "name": "movable",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setMovable(movable)",
    "type": "instanceMethod",
    "tldr": "Sets whether the window can be moved by user."
  },
  {
    "name": "isMovable",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "On Linux always returns true.",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window can be moved by user."
    },
    "title": "win.isMovable()",
    "type": "instanceMethod",
    "tldr": "On Linux always returns true.."
  },
  {
    "name": "setMinimizable",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "Sets whether the window can be manually minimized by user. On Linux does nothing.",
    "parameters": [
      {
        "name": "minimizable",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setMinimizable(minimizable)",
    "type": "instanceMethod",
    "tldr": "Sets whether the window can be manually minimized by user."
  },
  {
    "name": "isMinimizable",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "On Linux always returns true.",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window can be manually minimized by user"
    },
    "title": "win.isMinimizable()",
    "type": "instanceMethod",
    "tldr": "On Linux always returns true.."
  },
  {
    "name": "setMaximizable",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "Sets whether the window can be manually maximized by user. On Linux does nothing.",
    "parameters": [
      {
        "name": "maximizable",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setMaximizable(maximizable)",
    "type": "instanceMethod",
    "tldr": "Sets whether the window can be manually maximized by user."
  },
  {
    "name": "isMaximizable",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "On Linux always returns true.",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window can be manually maximized by user."
    },
    "title": "win.isMaximizable()",
    "type": "instanceMethod",
    "tldr": "On Linux always returns true.."
  },
  {
    "name": "setFullScreenable",
    "description": "Sets whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.",
    "parameters": [
      {
        "name": "fullscreenable",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setFullScreenable(fullscreenable)",
    "type": "instanceMethod",
    "tldr": "Sets whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.."
  },
  {
    "name": "isFullScreenable",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the maximize/zoom window button toggles fullscreen mode or maximizes the window."
    },
    "title": "win.isFullScreenable()",
    "type": "instanceMethod",
    "tldr": "Returns whether the maximize/zoom window button toggles fullscreen mode or maximizes the window."
  },
  {
    "name": "setClosable",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "Sets whether the window can be manually closed by user. On Linux does nothing.",
    "parameters": [
      {
        "name": "closable",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setClosable(closable)",
    "type": "instanceMethod",
    "tldr": "Sets whether the window can be manually closed by user."
  },
  {
    "name": "isClosable",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "On Linux always returns true.",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window can be manually closed by user."
    },
    "title": "win.isClosable()",
    "type": "instanceMethod",
    "tldr": "On Linux always returns true.."
  },
  {
    "name": "setAlwaysOnTop",
    "description": "Sets whether the window should show always on top of other windows. After setting this, the window is still a normal window, not a toolbox window which can not be focused on.",
    "parameters": [
      {
        "name": "flag",
        "type": "Boolean",
        "collection": false,
        "required": true
      },
      {
        "name": "level",
        "type": "String",
        "collection": false,
        "description": "Values include `normal`, `floating`, `torn-off-menu`, `modal-panel`, `main-menu`, `status`, `pop-up-menu`, `screen-saver`, and (Deprecated). The default is `floating`. See the for more details.",
        "required": false,
        "possibleValues": [
          {
            "value": "normal"
          },
          {
            "value": "floating"
          },
          {
            "value": "torn-off-menu"
          },
          {
            "value": "modal-panel"
          },
          {
            "value": "main-menu"
          },
          {
            "value": "status"
          },
          {
            "value": "pop-up-menu"
          },
          {
            "value": "screen-saver"
          }
        ]
      },
      {
        "name": "relativeLevel",
        "type": "Integer",
        "collection": false,
        "description": "The number of layers higher to set this window relative to the given `level`. The default is `0`. Note that Apple discourages setting levels higher than 1 above `screen-saver`.",
        "required": false
      }
    ],
    "title": "win.setAlwaysOnTop(flag[, level][, relativeLevel])",
    "type": "instanceMethod",
    "tldr": "Sets whether the window should show always on top of other windows."
  },
  {
    "name": "isAlwaysOnTop",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window is always on top of other windows."
    },
    "title": "win.isAlwaysOnTop()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window is always on top of other windows."
  },
  {
    "name": "center",
    "description": "Moves window to the center of the screen.",
    "title": "win.center()",
    "type": "instanceMethod",
    "tldr": "Moves window to the center of the screen.."
  },
  {
    "name": "setPosition",
    "description": "Moves window to x and y.",
    "parameters": [
      {
        "name": "x",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "y",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "animate",
        "type": "Boolean",
        "collection": false,
        "required": false
      }
    ],
    "title": "win.setPosition(x, y[, animate])",
    "type": "instanceMethod",
    "tldr": "Moves window to x and y.."
  },
  {
    "name": "getPosition",
    "returns": {
      "type": "Integer",
      "collection": true,
      "description": "Contains the window's current position."
    },
    "title": "win.getPosition()",
    "type": "instanceMethod",
    "tldr": "Returns contains the window's current position."
  },
  {
    "name": "setTitle",
    "description": "Changes the title of native window to title.",
    "parameters": [
      {
        "name": "title",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setTitle(title)",
    "type": "instanceMethod",
    "tldr": "Changes the title of native window to title.."
  },
  {
    "name": "getTitle",
    "description": "Note: The title of web page can be different from the title of the native window.",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The title of the native window."
    },
    "title": "win.getTitle()",
    "type": "instanceMethod",
    "tldr": "Note: The title of web page can be different from the title of the native window.."
  },
  {
    "name": "setSheetOffset",
    "platforms": [
      "macOS"
    ],
    "description": "Changes the attachment point for sheets on macOS. By default, sheets are attached just below the window frame, but you may want to display them beneath a HTML-rendered toolbar. For example:",
    "parameters": [
      {
        "name": "offsetY",
        "type": "Float",
        "collection": false,
        "required": true
      },
      {
        "name": "offsetX",
        "type": "Float",
        "collection": false,
        "required": false
      }
    ],
    "title": "win.setSheetOffset(offsetY[, offsetX])",
    "type": "instanceMethod",
    "tldr": "Changes the attachment point for sheets on macOS."
  },
  {
    "name": "flashFrame",
    "description": "Starts or stops flashing the window to attract user's attention.",
    "parameters": [
      {
        "name": "flag",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.flashFrame(flag)",
    "type": "instanceMethod",
    "tldr": "Starts or stops flashing the window to attract user's attention.."
  },
  {
    "name": "setSkipTaskbar",
    "description": "Makes the window not show in the taskbar.",
    "parameters": [
      {
        "name": "skip",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setSkipTaskbar(skip)",
    "type": "instanceMethod",
    "tldr": "Makes the window not show in the taskbar.."
  },
  {
    "name": "setKiosk",
    "description": "Enters or leaves the kiosk mode.",
    "parameters": [
      {
        "name": "flag",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setKiosk(flag)",
    "type": "instanceMethod",
    "tldr": "Enters or leaves the kiosk mode.."
  },
  {
    "name": "isKiosk",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window is in kiosk mode."
    },
    "title": "win.isKiosk()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window is in kiosk mode."
  },
  {
    "name": "getNativeWindowHandle",
    "description": "The native type of the handle is HWND on Windows, NSView* on macOS, and Window (unsigned long) on Linux.",
    "returns": {
      "type": "Buffer",
      "collection": false,
      "description": "The platform-specific handle of the window."
    },
    "title": "win.getNativeWindowHandle()",
    "type": "instanceMethod",
    "tldr": "The native type of the handle is HWND on Windows, NSView* on macOS, and Window (unsigned long) on Linux.."
  },
  {
    "name": "hookWindowMessage",
    "platforms": [
      "Windows"
    ],
    "description": "Hooks a windows message. The callback is called when the message is received in the WndProc.",
    "parameters": [
      {
        "name": "message",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.hookWindowMessage(message, callback)",
    "type": "instanceMethod",
    "tldr": "Hooks a windows message."
  },
  {
    "name": "isWindowMessageHooked",
    "platforms": [
      "Windows"
    ],
    "parameters": [
      {
        "name": "message",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "true or false depending on whether the message is hooked."
    },
    "title": "win.isWindowMessageHooked(message)",
    "type": "instanceMethod",
    "tldr": "Returns true or false depending on whether the message is hooked."
  },
  {
    "name": "unhookWindowMessage",
    "platforms": [
      "Windows"
    ],
    "description": "Unhook the window message.",
    "parameters": [
      {
        "name": "message",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.unhookWindowMessage(message)",
    "type": "instanceMethod",
    "tldr": "Unhook the window message.."
  },
  {
    "name": "unhookAllWindowMessages",
    "platforms": [
      "Windows"
    ],
    "description": "Unhooks all of the window messages.",
    "title": "win.unhookAllWindowMessages()",
    "type": "instanceMethod",
    "tldr": "Unhooks all of the window messages.."
  },
  {
    "name": "setRepresentedFilename",
    "platforms": [
      "macOS"
    ],
    "description": "Sets the pathname of the file the window represents, and the icon of the file will show in window's title bar.",
    "parameters": [
      {
        "name": "filename",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setRepresentedFilename(filename)",
    "type": "instanceMethod",
    "tldr": "Sets the pathname of the file the window represents, and the icon of the file will show in window's title bar.."
  },
  {
    "name": "getRepresentedFilename",
    "platforms": [
      "macOS"
    ],
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The pathname of the file the window represents."
    },
    "title": "win.getRepresentedFilename()",
    "type": "instanceMethod",
    "tldr": "Returns the pathname of the file the window represents."
  },
  {
    "name": "setDocumentEdited",
    "platforms": [
      "macOS"
    ],
    "description": "Specifies whether the window’s document has been edited, and the icon in title bar will become gray when set to true.",
    "parameters": [
      {
        "name": "edited",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setDocumentEdited(edited)",
    "type": "instanceMethod",
    "tldr": "Specifies whether the window’s document has been edited, and the icon in title bar will become gray when set to true.."
  },
  {
    "name": "isDocumentEdited",
    "platforms": [
      "macOS"
    ],
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window's document has been edited."
    },
    "title": "win.isDocumentEdited()",
    "type": "instanceMethod",
    "tldr": "Returns whether the window's document has been edited."
  },
  {
    "name": "focusOnWebView",
    "title": "win.focusOnWebView()",
    "type": "instanceMethod",
    "tldr": null
  },
  {
    "name": "blurWebView",
    "title": "win.blurWebView()",
    "type": "instanceMethod",
    "tldr": null
  },
  {
    "name": "capturePage",
    "description": "Same as webContents.capturePage([rect, ]callback).",
    "parameters": [
      {
        "name": "rect",
        "type": "Rectangle",
        "collection": false,
        "description": "The bounds to capture",
        "required": false
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "image",
            "type": "NativeImage",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "win.capturePage([rect, ]callback)",
    "type": "instanceMethod",
    "tldr": "Same as webContents.capturePage([rect, ]callback).."
  },
  {
    "name": "loadURL",
    "description": "Same as webContents.loadURL(url[, options]). The url can be a remote address (e.g. http://) or a path to a local HTML file using the file:// protocol. To ensure that file URLs are properly formatted, it is recommended to use Node's url.format method: You can load a URL using a POST request with URL-encoded data by doing the following:",
    "parameters": [
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "httpReferrer",
            "type": "String",
            "collection": false,
            "description": "A HTTP Referrer url.",
            "required": false
          },
          {
            "name": "userAgent",
            "type": "String",
            "collection": false,
            "description": "A user agent originating the request.",
            "required": false
          },
          {
            "name": "extraHeaders",
            "type": "String",
            "collection": false,
            "description": "Extra headers separated by \"\\n\"",
            "required": false
          },
          {
            "name": "postData",
            "type": [
              {
                "typeName": "UploadRawData",
                "collection": true
              },
              {
                "typeName": "UploadFile",
                "collection": true
              },
              {
                "typeName": "UploadFileSystem",
                "collection": true
              },
              {
                "typeName": "UploadBlob",
                "collection": true
              }
            ],
            "collection": false,
            "description": "",
            "required": false
          },
          {
            "name": "baseURLForDataURL",
            "type": "String",
            "collection": false,
            "description": "Base url (with trailing path separator) for files to be loaded by the data url. This is needed only if the specified url is a data url and needs to load other files.",
            "required": false
          }
        ]
      }
    ],
    "title": "win.loadURL(url[, options])",
    "type": "instanceMethod",
    "tldr": "Same as webContents.loadURL(url[, options])."
  },
  {
    "name": "loadFile",
    "description": "Same as webContents.loadFile, filePath should be a path to an HTML file relative to the root of your application.  See the webContents docs for more information.",
    "parameters": [
      {
        "name": "filePath",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.loadFile(filePath)",
    "type": "instanceMethod",
    "tldr": "Same as webContents.loadFile, filePath should be a path to an HTML file relative to the root of your application."
  },
  {
    "name": "reload",
    "description": "Same as webContents.reload.",
    "title": "win.reload()",
    "type": "instanceMethod",
    "tldr": "Same as webContents.reload.."
  },
  {
    "name": "setMenu",
    "platforms": [
      "Linux",
      "Windows"
    ],
    "description": "Sets the menu as the window's menu bar, setting it to null will remove the menu bar.",
    "parameters": [
      {
        "name": "menu",
        "type": [
          {
            "typeName": "Menu",
            "collection": false
          },
          {
            "typeName": "null",
            "collection": false
          }
        ],
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setMenu(menu)",
    "type": "instanceMethod",
    "tldr": "Sets the menu as the window's menu bar, setting it to null will remove the menu bar.."
  },
  {
    "name": "setProgressBar",
    "description": "Sets progress value in progress bar. Valid range is [0, 1.0]. Remove progress bar when progress < 0; Change to indeterminate mode when progress > 1. On Linux platform, only supports Unity desktop environment, you need to specify the *.desktop file name to desktopName field in package.json. By default, it will assume app.getName().desktop. On Windows, a mode can be passed. Accepted values are none, normal, indeterminate, error, and paused. If you call setProgressBar without a mode set (but with a value within the valid range), normal will be assumed.",
    "parameters": [
      {
        "name": "progress",
        "type": "Double",
        "collection": false,
        "required": true
      },
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "mode",
            "type": "String",
            "collection": false,
            "description": "Mode for the progress bar. Can be none, normal, indeterminate, error or paused.",
            "required": true,
            "possibleValues": [
              {
                "value": "none"
              },
              {
                "value": "normal"
              },
              {
                "value": "indeterminate"
              },
              {
                "value": "error"
              },
              {
                "value": "paused"
              }
            ]
          }
        ]
      }
    ],
    "title": "win.setProgressBar(progress[, options])",
    "type": "instanceMethod",
    "tldr": "Sets progress value in progress bar."
  },
  {
    "name": "setOverlayIcon",
    "platforms": [
      "Windows"
    ],
    "description": "Sets a 16 x 16 pixel overlay onto the current taskbar icon, usually used to convey some sort of application status or to passively notify the user.",
    "parameters": [
      {
        "name": "overlay",
        "type": "NativeImage",
        "collection": false,
        "description": "the icon to display on the bottom right corner of the taskbar icon. If this parameter is `null`, the overlay is cleared",
        "required": true
      },
      {
        "name": "description",
        "type": "String",
        "collection": false,
        "description": "a description that will be provided to Accessibility screen readers",
        "required": true
      }
    ],
    "title": "win.setOverlayIcon(overlay, description)",
    "type": "instanceMethod",
    "tldr": "Sets a 16 x 16 pixel overlay onto the current taskbar icon, usually used to convey some sort of application status or to passively notify the user.."
  },
  {
    "name": "setHasShadow",
    "platforms": [
      "macOS"
    ],
    "description": "Sets whether the window should have a shadow. On Windows and Linux does nothing.",
    "parameters": [
      {
        "name": "hasShadow",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setHasShadow(hasShadow)",
    "type": "instanceMethod",
    "tldr": "Sets whether the window should have a shadow."
  },
  {
    "name": "hasShadow",
    "platforms": [
      "macOS"
    ],
    "description": "On Windows and Linux always returns true.",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window has a shadow."
    },
    "title": "win.hasShadow()",
    "type": "instanceMethod",
    "tldr": "On Windows and Linux always returns true.."
  },
  {
    "name": "setOpacity",
    "platforms": [
      "Windows",
      "macOS"
    ],
    "description": "Sets the opacity of the window. On Linux does nothing.",
    "parameters": [
      {
        "name": "opacity",
        "type": "Number",
        "collection": false,
        "description": "between 0.0 (fully transparent) and 1.0 (fully opaque)",
        "required": true
      }
    ],
    "title": "win.setOpacity(opacity)",
    "type": "instanceMethod",
    "tldr": "Sets the opacity of the window."
  },
  {
    "name": "getOpacity",
    "platforms": [
      "Windows",
      "macOS"
    ],
    "returns": {
      "type": "Number",
      "collection": false,
      "description": "between 0.0 (fully transparent) and 1.0 (fully opaque)"
    },
    "title": "win.getOpacity()",
    "type": "instanceMethod",
    "tldr": "Returns between 0.0 (fully transparent) and 1.0 (fully opaque)"
  },
  {
    "name": "setThumbarButtons",
    "platforms": [
      "Windows"
    ],
    "description": "Add a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button layout. Returns a Boolean object indicates whether the thumbnail has been added successfully. The number of buttons in thumbnail toolbar should be no greater than 7 due to the limited room. Once you setup the thumbnail toolbar, the toolbar cannot be removed due to the platform's limitation. But you can call the API with an empty array to clean the buttons. The buttons is an array of Button objects: The flags is an array that can include following Strings:",
    "parameters": [
      {
        "name": "buttons",
        "type": "ThumbarButton",
        "collection": true,
        "required": true
      }
    ],
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the buttons were added successfully"
    },
    "title": "win.setThumbarButtons(buttons)",
    "type": "instanceMethod",
    "tldr": "Add a thumbnail toolbar with a specified set of buttons to the thumbnail image of a window in a taskbar button layout."
  },
  {
    "name": "setThumbnailClip",
    "platforms": [
      "Windows"
    ],
    "description": "Sets the region of the window to show as the thumbnail image displayed when hovering over the window in the taskbar. You can reset the thumbnail to be the entire window by specifying an empty region: {x: 0, y: 0, width: 0, height: 0}.",
    "parameters": [
      {
        "name": "region",
        "type": "Rectangle",
        "collection": false,
        "description": "Region of the window",
        "required": true
      }
    ],
    "title": "win.setThumbnailClip(region)",
    "type": "instanceMethod",
    "tldr": "Sets the region of the window to show as the thumbnail image displayed when hovering over the window in the taskbar."
  },
  {
    "name": "setThumbnailToolTip",
    "platforms": [
      "Windows"
    ],
    "description": "Sets the toolTip that is displayed when hovering over the window thumbnail in the taskbar.",
    "parameters": [
      {
        "name": "toolTip",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setThumbnailToolTip(toolTip)",
    "type": "instanceMethod",
    "tldr": "Sets the toolTip that is displayed when hovering over the window thumbnail in the taskbar.."
  },
  {
    "name": "setAppDetails",
    "platforms": [
      "Windows"
    ],
    "description": "Sets the properties for the window's taskbar button. Note: relaunchCommand and relaunchDisplayName must always be set together. If one of those properties is not set, then neither will be used.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "appId",
            "type": "String",
            "collection": false,
            "description": "Window's . It has to be set, otherwise the other options will have no effect.",
            "required": false
          },
          {
            "name": "appIconPath",
            "type": "String",
            "collection": false,
            "description": "Window's .",
            "required": false
          },
          {
            "name": "appIconIndex",
            "type": "Integer",
            "collection": false,
            "description": "Index of the icon in appIconPath. Ignored when appIconPath is not set. Default is 0.",
            "required": false
          },
          {
            "name": "relaunchCommand",
            "type": "String",
            "collection": false,
            "description": "Window's .",
            "required": false
          },
          {
            "name": "relaunchDisplayName",
            "type": "String",
            "collection": false,
            "description": "Window's .",
            "required": false
          }
        ]
      }
    ],
    "title": "win.setAppDetails(options)",
    "type": "instanceMethod",
    "tldr": "Sets the properties for the window's taskbar button."
  },
  {
    "name": "showDefinitionForSelection",
    "platforms": [
      "macOS"
    ],
    "description": "Same as webContents.showDefinitionForSelection().",
    "title": "win.showDefinitionForSelection()",
    "type": "instanceMethod",
    "tldr": "Same as webContents.showDefinitionForSelection().."
  },
  {
    "name": "setIcon",
    "platforms": [
      "Windows",
      "Linux"
    ],
    "description": "Changes window icon.",
    "parameters": [
      {
        "name": "icon",
        "type": "NativeImage",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setIcon(icon)",
    "type": "instanceMethod",
    "tldr": "Changes window icon.."
  },
  {
    "name": "setAutoHideMenuBar",
    "description": "Sets whether the window menu bar should hide itself automatically. Once set the menu bar will only show when users press the single Alt key. If the menu bar is already visible, calling setAutoHideMenuBar(true) won't hide it immediately.",
    "parameters": [
      {
        "name": "hide",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setAutoHideMenuBar(hide)",
    "type": "instanceMethod",
    "tldr": "Sets whether the window menu bar should hide itself automatically."
  },
  {
    "name": "isMenuBarAutoHide",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether menu bar automatically hides itself."
    },
    "title": "win.isMenuBarAutoHide()",
    "type": "instanceMethod",
    "tldr": "Returns whether menu bar automatically hides itself."
  },
  {
    "name": "setMenuBarVisibility",
    "platforms": [
      "Windows",
      "Linux"
    ],
    "description": "Sets whether the menu bar should be visible. If the menu bar is auto-hide, users can still bring up the menu bar by pressing the single Alt key.",
    "parameters": [
      {
        "name": "visible",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setMenuBarVisibility(visible)",
    "type": "instanceMethod",
    "tldr": "Sets whether the menu bar should be visible."
  },
  {
    "name": "isMenuBarVisible",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the menu bar is visible."
    },
    "title": "win.isMenuBarVisible()",
    "type": "instanceMethod",
    "tldr": "Returns whether the menu bar is visible."
  },
  {
    "name": "setVisibleOnAllWorkspaces",
    "description": "Sets whether the window should be visible on all workspaces. Note: This API does nothing on Windows.",
    "parameters": [
      {
        "name": "visible",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setVisibleOnAllWorkspaces(visible)",
    "type": "instanceMethod",
    "tldr": "Sets whether the window should be visible on all workspaces."
  },
  {
    "name": "isVisibleOnAllWorkspaces",
    "description": "Note: This API always returns false on Windows.",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the window is visible on all workspaces."
    },
    "title": "win.isVisibleOnAllWorkspaces()",
    "type": "instanceMethod",
    "tldr": "Note: This API always returns false on Windows.."
  },
  {
    "name": "setIgnoreMouseEvents",
    "description": "Makes the window ignore all mouse events. All mouse events happened in this window will be passed to the window below this window, but if this window has focus, it will still receive keyboard events.",
    "parameters": [
      {
        "name": "ignore",
        "type": "Boolean",
        "collection": false,
        "required": true
      },
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "forward",
            "type": "Boolean",
            "collection": false,
            "description": "If true, forwards mouse move messages to Chromium, enabling mouse related events such as mouseleave. Only used when ignore is true. If ignore is false, forwarding is always disabled regardless of this value.",
            "required": false
          }
        ]
      }
    ],
    "title": "win.setIgnoreMouseEvents(ignore[, options])",
    "type": "instanceMethod",
    "tldr": "Makes the window ignore all mouse events."
  },
  {
    "name": "setContentProtection",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "Prevents the window contents from being captured by other apps. On macOS it sets the NSWindow's sharingType to NSWindowSharingNone. On Windows it calls SetWindowDisplayAffinity with WDA_MONITOR.",
    "parameters": [
      {
        "name": "enable",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setContentProtection(enable)",
    "type": "instanceMethod",
    "tldr": "Prevents the window contents from being captured by other apps."
  },
  {
    "name": "setFocusable",
    "platforms": [
      "Windows"
    ],
    "description": "Changes whether the window can be focused.",
    "parameters": [
      {
        "name": "focusable",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setFocusable(focusable)",
    "type": "instanceMethod",
    "tldr": "Changes whether the window can be focused.."
  },
  {
    "name": "setParentWindow",
    "platforms": [
      "Linux",
      "macOS"
    ],
    "description": "Sets parent as current window's parent window, passing null will turn current window into a top-level window.",
    "parameters": [
      {
        "name": "parent",
        "type": "BrowserWindow",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setParentWindow(parent)",
    "type": "instanceMethod",
    "tldr": "Sets parent as current window's parent window, passing null will turn current window into a top-level window.."
  },
  {
    "name": "getParentWindow",
    "returns": {
      "type": "BrowserWindow",
      "collection": false,
      "description": "The parent window."
    },
    "title": "win.getParentWindow()",
    "type": "instanceMethod",
    "tldr": "Returns the parent window."
  },
  {
    "name": "getChildWindows",
    "returns": {
      "type": "BrowserWindow",
      "collection": true,
      "description": "All child windows."
    },
    "title": "win.getChildWindows()",
    "type": "instanceMethod",
    "tldr": "Returns all child windows."
  },
  {
    "name": "setAutoHideCursor",
    "platforms": [
      "macOS"
    ],
    "description": "Controls whether to hide cursor when typing.",
    "parameters": [
      {
        "name": "autoHide",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setAutoHideCursor(autoHide)",
    "type": "instanceMethod",
    "tldr": "Controls whether to hide cursor when typing.."
  },
  {
    "name": "selectPreviousTab",
    "platforms": [
      "macOS"
    ],
    "description": "Selects the previous tab when native tabs are enabled and there are other tabs in the window.",
    "title": "win.selectPreviousTab()",
    "type": "instanceMethod",
    "tldr": "Selects the previous tab when native tabs are enabled and there are other tabs in the window.."
  },
  {
    "name": "selectNextTab",
    "platforms": [
      "macOS"
    ],
    "description": "Selects the next tab when native tabs are enabled and there are other tabs in the window.",
    "title": "win.selectNextTab()",
    "type": "instanceMethod",
    "tldr": "Selects the next tab when native tabs are enabled and there are other tabs in the window.."
  },
  {
    "name": "mergeAllWindows",
    "platforms": [
      "macOS"
    ],
    "description": "Merges all windows into one window with multiple tabs when native tabs are enabled and there is more than one open window.",
    "title": "win.mergeAllWindows()",
    "type": "instanceMethod",
    "tldr": "Merges all windows into one window with multiple tabs when native tabs are enabled and there is more than one open window.."
  },
  {
    "name": "moveTabToNewWindow",
    "platforms": [
      "macOS"
    ],
    "description": "Moves the current tab into a new window if native tabs are enabled and there is more than one tab in the current window.",
    "title": "win.moveTabToNewWindow()",
    "type": "instanceMethod",
    "tldr": "Moves the current tab into a new window if native tabs are enabled and there is more than one tab in the current window.."
  },
  {
    "name": "toggleTabBar",
    "platforms": [
      "macOS"
    ],
    "description": "Toggles the visibility of the tab bar if native tabs are enabled and there is only one tab in the current window.",
    "title": "win.toggleTabBar()",
    "type": "instanceMethod",
    "tldr": "Toggles the visibility of the tab bar if native tabs are enabled and there is only one tab in the current window.."
  },
  {
    "name": "addTabbedWindow",
    "platforms": [
      "macOS"
    ],
    "description": "Adds a window as a tab on this window, after the tab for the window instance.",
    "parameters": [
      {
        "name": "browserWindow",
        "type": "BrowserWindow",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.addTabbedWindow(browserWindow)",
    "type": "instanceMethod",
    "tldr": "Adds a window as a tab on this window, after the tab for the window instance.."
  },
  {
    "name": "setVibrancy",
    "platforms": [
      "macOS"
    ],
    "description": "Adds a vibrancy effect to the browser window. Passing null or an empty string will remove the vibrancy effect on the window.",
    "parameters": [
      {
        "name": "type",
        "type": "String",
        "collection": false,
        "description": "Can be `appearance-based`, `light`, `dark`, `titlebar`, `selection`, `menu`, `popover`, `sidebar`, `medium-light` or `ultra-dark`. See the for more details.",
        "required": true,
        "possibleValues": [
          {
            "value": "appearance-based"
          },
          {
            "value": "light"
          },
          {
            "value": "dark"
          },
          {
            "value": "titlebar"
          },
          {
            "value": "selection"
          },
          {
            "value": "menu"
          },
          {
            "value": "popover"
          },
          {
            "value": "sidebar"
          },
          {
            "value": "medium-light"
          },
          {
            "value": "ultra-dark"
          }
        ]
      }
    ],
    "title": "win.setVibrancy(type)",
    "type": "instanceMethod",
    "tldr": "Adds a vibrancy effect to the browser window."
  },
  {
    "name": "setTouchBar",
    "platforms": [
      "macOS",
      "Experimental"
    ],
    "description": "Sets the touchBar layout for the current window. Specifying null or undefined clears the touch bar. This method only has an effect if the machine has a touch bar and is running on macOS 10.12.1+. Note: The TouchBar API is currently experimental and may change or be removed in future Electron releases.",
    "parameters": [
      {
        "name": "touchBar",
        "type": "TouchBar",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setTouchBar(touchBar)",
    "type": "instanceMethod",
    "tldr": "Sets the touchBar layout for the current window."
  },
  {
    "name": "setBrowserView",
    "platforms": [
      "Experimental"
    ],
    "parameters": [
      {
        "name": "browserView",
        "type": "BrowserView",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.setBrowserView(browserView)",
    "type": "instanceMethod",
    "tldr": null
  },
  {
    "name": "getBrowserView",
    "platforms": [
      "Experimental"
    ],
    "description": "Note: The BrowserView API is currently experimental and may change or be removed in future Electron releases.",
    "returns": {
      "type": [
        {
          "typeName": "BrowserView",
          "collection": false
        },
        {
          "typeName": "null",
          "collection": false
        }
      ],
      "collection": false,
      "description": "an attached BrowserView. Returns null if none is attached."
    },
    "title": "win.getBrowserView()",
    "type": "instanceMethod",
    "tldr": "Note: The BrowserView API is currently experimental and may change or be removed in future Electron releases.."
  },
  {
    "name": "page-title-updated",
    "description": "Emitted when the document changed its title, calling event.preventDefault() will prevent the native window's title from changing.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "title",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.on('page-title-updated')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-page-title-updated",
    "tldr": "Emitted when the document changed its title, calling event.preventDefault() will prevent the native window's title from changing.."
  },
  {
    "name": "close",
    "description": "Emitted when the window is going to be closed. It's emitted before the beforeunload and unload event of the DOM. Calling event.preventDefault() will cancel the close. Usually you would want to use the beforeunload handler to decide whether the window should be closed, which will also be called when the window is reloaded. In Electron, returning any value other than undefined would cancel the close. For example: Note: There is a subtle difference between the behaviors of window.onbeforeunload = handler and window.addEventListener('beforeunload', handler). It is recommended to always set the event.returnValue explicitly, instead of just returning a value, as the former works more consistently within Electron.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.on('close')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-close",
    "tldr": "Emitted when the window is going to be closed."
  },
  {
    "name": "closed",
    "description": "Emitted when the window is closed. After you have received this event you should remove the reference to the window and avoid using it any more.",
    "title": "win.on('closed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-closed",
    "tldr": "Emitted when the window is closed."
  },
  {
    "name": "session-end",
    "description": "Emitted when window session is going to end due to force shutdown or machine restart or session log off.",
    "platforms": [
      "Windows"
    ],
    "title": "win.on('session-end')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-session-end",
    "tldr": "Emitted when window session is going to end due to force shutdown or machine restart or session log off.."
  },
  {
    "name": "unresponsive",
    "description": "Emitted when the web page becomes unresponsive.",
    "title": "win.on('unresponsive')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-unresponsive",
    "tldr": "Emitted when the web page becomes unresponsive.."
  },
  {
    "name": "responsive",
    "description": "Emitted when the unresponsive web page becomes responsive again.",
    "title": "win.on('responsive')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-responsive",
    "tldr": "Emitted when the unresponsive web page becomes responsive again.."
  },
  {
    "name": "blur",
    "description": "Emitted when the window loses focus.",
    "title": "win.on('blur')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-blur",
    "tldr": "Emitted when the window loses focus.."
  },
  {
    "name": "focus",
    "description": "Emitted when the window gains focus.",
    "title": "win.on('focus')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-focus",
    "tldr": "Emitted when the window gains focus.."
  },
  {
    "name": "show",
    "description": "Emitted when the window is shown.",
    "title": "win.on('show')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-show",
    "tldr": "Emitted when the window is shown.."
  },
  {
    "name": "hide",
    "description": "Emitted when the window is hidden.",
    "title": "win.on('hide')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-hide",
    "tldr": "Emitted when the window is hidden.."
  },
  {
    "name": "ready-to-show",
    "description": "Emitted when the web page has been rendered (while not being shown) and window can be displayed without a visual flash.",
    "title": "win.on('ready-to-show')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-ready-to-show",
    "tldr": "Emitted when the web page has been rendered (while not being shown) and window can be displayed without a visual flash.."
  },
  {
    "name": "maximize",
    "description": "Emitted when window is maximized.",
    "title": "win.on('maximize')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-maximize",
    "tldr": "Emitted when window is maximized.."
  },
  {
    "name": "unmaximize",
    "description": "Emitted when the window exits from a maximized state.",
    "title": "win.on('unmaximize')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-unmaximize",
    "tldr": "Emitted when the window exits from a maximized state.."
  },
  {
    "name": "minimize",
    "description": "Emitted when the window is minimized.",
    "title": "win.on('minimize')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-minimize",
    "tldr": "Emitted when the window is minimized.."
  },
  {
    "name": "restore",
    "description": "Emitted when the window is restored from a minimized state.",
    "title": "win.on('restore')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-restore",
    "tldr": "Emitted when the window is restored from a minimized state.."
  },
  {
    "name": "resize",
    "description": "Emitted when the window is being resized.",
    "title": "win.on('resize')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-resize",
    "tldr": "Emitted when the window is being resized.."
  },
  {
    "name": "move",
    "description": "Emitted when the window is being moved to a new position. Note: On macOS this event is just an alias of moved.",
    "title": "win.on('move')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-move",
    "tldr": "Emitted when the window is being moved to a new position."
  },
  {
    "name": "moved",
    "description": "Emitted once when the window is moved to a new position.",
    "platforms": [
      "macOS"
    ],
    "title": "win.on('moved')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-moved",
    "tldr": "Emitted once when the window is moved to a new position.."
  },
  {
    "name": "enter-full-screen",
    "description": "Emitted when the window enters a full-screen state.",
    "title": "win.on('enter-full-screen')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-enter-full-screen",
    "tldr": "Emitted when the window enters a full-screen state.."
  },
  {
    "name": "leave-full-screen",
    "description": "Emitted when the window leaves a full-screen state.",
    "title": "win.on('leave-full-screen')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-leave-full-screen",
    "tldr": "Emitted when the window leaves a full-screen state.."
  },
  {
    "name": "enter-html-full-screen",
    "description": "Emitted when the window enters a full-screen state triggered by HTML API.",
    "title": "win.on('enter-html-full-screen')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-enter-html-full-screen",
    "tldr": "Emitted when the window enters a full-screen state triggered by HTML API.."
  },
  {
    "name": "leave-html-full-screen",
    "description": "Emitted when the window leaves a full-screen state triggered by HTML API.",
    "title": "win.on('leave-html-full-screen')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-leave-html-full-screen",
    "tldr": "Emitted when the window leaves a full-screen state triggered by HTML API.."
  },
  {
    "name": "app-command",
    "description": "Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well as the \"Back\" button built into some mice on Windows. Commands are lowercased, underscores are replaced with hyphens, and the APPCOMMAND_ prefix is stripped off. e.g. APPCOMMAND_BROWSER_BACKWARD is emitted as browser-backward.",
    "platforms": [
      "Windows"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "command",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.on('app-command')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-app-command",
    "tldr": "Emitted when an App Command is invoked."
  },
  {
    "name": "scroll-touch-begin",
    "description": "Emitted when scroll wheel event phase has begun.",
    "platforms": [
      "macOS"
    ],
    "title": "win.on('scroll-touch-begin')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-scroll-touch-begin",
    "tldr": "Emitted when scroll wheel event phase has begun.."
  },
  {
    "name": "scroll-touch-end",
    "description": "Emitted when scroll wheel event phase has ended.",
    "platforms": [
      "macOS"
    ],
    "title": "win.on('scroll-touch-end')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-scroll-touch-end",
    "tldr": "Emitted when scroll wheel event phase has ended.."
  },
  {
    "name": "scroll-touch-edge",
    "description": "Emitted when scroll wheel event phase filed upon reaching the edge of element.",
    "platforms": [
      "macOS"
    ],
    "title": "win.on('scroll-touch-edge')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-scroll-touch-edge",
    "tldr": "Emitted when scroll wheel event phase filed upon reaching the edge of element.."
  },
  {
    "name": "swipe",
    "description": "Emitted on 3-finger swipe. Possible directions are up, right, down, left.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "direction",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.on('swipe')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-swipe",
    "tldr": "Emitted on 3-finger swipe."
  },
  {
    "name": "sheet-begin",
    "description": "Emitted when the window opens a sheet.",
    "platforms": [
      "macOS"
    ],
    "title": "win.on('sheet-begin')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-sheet-begin",
    "tldr": "Emitted when the window opens a sheet.."
  },
  {
    "name": "sheet-end",
    "description": "Emitted when the window has closed a sheet.",
    "platforms": [
      "macOS"
    ],
    "title": "win.on('sheet-end')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-sheet-end",
    "tldr": "Emitted when the window has closed a sheet.."
  },
  {
    "name": "new-window-for-tab",
    "description": "Emitted when the native new tab button is clicked.",
    "platforms": [
      "macOS"
    ],
    "title": "win.on('new-window-for-tab')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/browser-window#event-new-window-for-tab",
    "tldr": "Emitted when the native new tab button is clicked.."
  },
  {
    "name": "blur",
    "description": "Removes focus from the child window.",
    "title": "win.blur()",
    "type": "instanceMethod",
    "tldr": "Removes focus from the child window.."
  },
  {
    "name": "close",
    "description": "Forcefully closes the child window without calling its unload event.",
    "title": "win.close()",
    "type": "instanceMethod",
    "tldr": "Forcefully closes the child window without calling its unload event.."
  },
  {
    "name": "eval",
    "description": "Evaluates the code in the child window.",
    "parameters": [
      {
        "name": "code",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.eval(code)",
    "type": "instanceMethod",
    "tldr": "Evaluates the code in the child window.."
  },
  {
    "name": "focus",
    "description": "Focuses the child window (brings the window to front).",
    "title": "win.focus()",
    "type": "instanceMethod",
    "tldr": "Focuses the child window (brings the window to front).."
  },
  {
    "name": "print",
    "description": "Invokes the print dialog on the child window.",
    "title": "win.print()",
    "type": "instanceMethod",
    "tldr": "Invokes the print dialog on the child window.."
  },
  {
    "name": "postMessage",
    "description": "Sends a message to the child window with the specified origin or * for no origin preference. In addition to these methods, the child window implements window.opener object with no properties and a single method.",
    "parameters": [
      {
        "name": "message",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "targetOrigin",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "win.postMessage(message, targetOrigin)",
    "type": "instanceMethod",
    "tldr": "Sends a message to the child window with the specified origin or * for no origin preference."
  },
  {
    "name": "setHeader",
    "description": "Adds an extra HTTP header. The header name will issued as it is without lowercasing. It can be called only before first write. Calling this method after the first write will throw an error. If the passed value is not a String, its toString() method will be called to obtain the final value.",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "collection": false,
        "description": "An extra HTTP header name.",
        "required": true
      },
      {
        "name": "value",
        "type": "Object",
        "collection": false,
        "description": "An extra HTTP header value.",
        "required": true
      }
    ],
    "title": "request.setHeader(name, value)",
    "type": "instanceMethod",
    "tldr": "Adds an extra HTTP header."
  },
  {
    "name": "getHeader",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "collection": false,
        "description": "Specify an extra header name.",
        "required": true
      }
    ],
    "returns": {
      "type": "Object",
      "collection": false,
      "description": "The value of a previously set extra header name.",
      "properties": [
        {
          "name": "name",
          "type": "String",
          "collection": false,
          "description": "Specify an extra header name.",
          "required": true
        }
      ]
    },
    "title": "request.getHeader(name)",
    "type": "instanceMethod",
    "tldr": "Returns the value of a previously set extra header name."
  },
  {
    "name": "removeHeader",
    "description": "Removes a previously set extra header name. This method can be called only before first write. Trying to call it after the first write will throw an error.",
    "parameters": [
      {
        "name": "name",
        "type": "String",
        "collection": false,
        "description": "Specify an extra header name.",
        "required": true
      }
    ],
    "title": "request.removeHeader(name)",
    "type": "instanceMethod",
    "tldr": "Removes a previously set extra header name."
  },
  {
    "name": "write",
    "description": "callback is essentially a dummy function introduced in the purpose of keeping similarity with the Node.js API. It is called asynchronously in the next tick after chunk content have been delivered to the Chromium networking layer. Contrary to the Node.js implementation, it is not guaranteed that chunk content have been flushed on the wire before callback is called. Adds a chunk of data to the request body. The first write operation may cause the request headers to be issued on the wire. After the first write operation, it is not allowed to add or remove a custom header.",
    "parameters": [
      {
        "name": "chunk",
        "type": [
          {
            "typeName": "String",
            "collection": false
          },
          {
            "typeName": "Buffer",
            "collection": false
          }
        ],
        "collection": false,
        "description": "A chunk of the request body's data. If it is a string, it is converted into a Buffer using the specified encoding.",
        "required": true
      },
      {
        "name": "encoding",
        "type": "String",
        "collection": false,
        "description": "Used to convert string chunks into Buffer objects. Defaults to 'utf-8'.",
        "required": false
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "description": "Called after the write operation ends.",
        "required": false
      }
    ],
    "title": "request.write(chunk[, encoding][, callback])",
    "type": "instanceMethod",
    "tldr": "callback is essentially a dummy function introduced in the purpose of keeping similarity with the Node.js API."
  },
  {
    "name": "end",
    "description": "Sends the last chunk of the request data. Subsequent write or end operations will not be allowed. The finish event is emitted just after the end operation.",
    "parameters": [
      {
        "name": "chunk",
        "type": [
          {
            "typeName": "String",
            "collection": false
          },
          {
            "typeName": "Buffer",
            "collection": false
          }
        ],
        "collection": false,
        "required": false
      },
      {
        "name": "encoding",
        "type": "String",
        "collection": false,
        "required": false
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": false
      }
    ],
    "title": "request.end([chunk][, encoding][, callback])",
    "type": "instanceMethod",
    "tldr": "Sends the last chunk of the request data."
  },
  {
    "name": "abort",
    "description": "Cancels an ongoing HTTP transaction. If the request has already emitted the close event, the abort operation will have no effect. Otherwise an ongoing event will emit abort and close events. Additionally, if there is an ongoing response object,it will emit the aborted event.",
    "title": "request.abort()",
    "type": "instanceMethod",
    "tldr": "Cancels an ongoing HTTP transaction."
  },
  {
    "name": "followRedirect",
    "description": "Continues any deferred redirection request when the redirection mode is manual.",
    "title": "request.followRedirect()",
    "type": "instanceMethod",
    "tldr": "Continues any deferred redirection request when the redirection mode is manual.."
  },
  {
    "name": "response",
    "returns": [
      {
        "name": "response",
        "type": "IncomingMessage",
        "collection": false,
        "description": "An object representing the HTTP response message.",
        "required": true
      }
    ],
    "title": "request.on('response')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/client-request#event-response",
    "tldr": null
  },
  {
    "name": "login",
    "description": "Emitted when an authenticating proxy is asking for user credentials. The callback function is expected to be called back with user credentials: Providing empty credentials will cancel the request and report an authentication error on the response object:",
    "returns": [
      {
        "name": "authInfo",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "isProxy",
            "type": "Boolean",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "scheme",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "host",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "port",
            "type": "Integer",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "realm",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "username",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "password",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "request.on('login')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/client-request#event-login",
    "tldr": "Emitted when an authenticating proxy is asking for user credentials."
  },
  {
    "name": "finish",
    "description": "Emitted just after the last chunk of the request's data has been written into the request object.",
    "title": "request.on('finish')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/client-request#event-finish",
    "tldr": "Emitted just after the last chunk of the request's data has been written into the request object.."
  },
  {
    "name": "abort",
    "description": "Emitted when the request is aborted. The abort event will not be fired if the request is already closed.",
    "title": "request.on('abort')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/client-request#event-abort",
    "tldr": "Emitted when the request is aborted."
  },
  {
    "name": "error",
    "description": "Emitted when the net module fails to issue a network request. Typically when the request object emits an error event, a close event will subsequently follow and no response object will be provided.",
    "returns": [
      {
        "name": "error",
        "type": "Error",
        "collection": false,
        "description": "an error object providing some information about the failure.",
        "required": true
      }
    ],
    "title": "request.on('error')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/client-request#event-error",
    "tldr": "Emitted when the net module fails to issue a network request."
  },
  {
    "name": "close",
    "description": "Emitted as the last event in the HTTP request-response transaction. The close event indicates that no more events will be emitted on either the request or response objects.",
    "title": "request.on('close')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/client-request#event-close",
    "tldr": "Emitted as the last event in the HTTP request-response transaction."
  },
  {
    "name": "redirect",
    "description": "Emitted when there is redirection and the mode is manual. Calling request.followRedirect will continue with the redirection.",
    "returns": [
      {
        "name": "statusCode",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "method",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "redirectUrl",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "responseHeaders",
        "type": "Object",
        "collection": false,
        "required": true
      }
    ],
    "title": "request.on('redirect')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/client-request#event-redirect",
    "tldr": "Emitted when there is redirection and the mode is manual."
  },
  {
    "name": "get",
    "description": "Sends a request to get all cookies matching filter, callback will be called with callback(error, cookies) on complete.",
    "parameters": [
      {
        "name": "filter",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "url",
            "type": "String",
            "collection": false,
            "description": "Retrieves cookies which are associated with url. Empty implies retrieving cookies of all urls.",
            "required": false
          },
          {
            "name": "name",
            "type": "String",
            "collection": false,
            "description": "Filters cookies by name.",
            "required": false
          },
          {
            "name": "domain",
            "type": "String",
            "collection": false,
            "description": "Retrieves cookies whose domains match or are subdomains of domains.",
            "required": false
          },
          {
            "name": "path",
            "type": "String",
            "collection": false,
            "description": "Retrieves cookies whose path matches path.",
            "required": false
          },
          {
            "name": "secure",
            "type": "Boolean",
            "collection": false,
            "description": "Filters cookies by their Secure property.",
            "required": false
          },
          {
            "name": "session",
            "type": "Boolean",
            "collection": false,
            "description": "Filters out session or persistent cookies.",
            "required": false
          }
        ]
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "error",
            "type": "Error",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "cookies",
            "type": "Cookie",
            "collection": true,
            "description": "an array of cookie objects.",
            "required": true
          }
        ]
      }
    ],
    "title": "cookies.get(filter, callback)",
    "type": "instanceMethod",
    "tldr": "Sends a request to get all cookies matching filter, callback will be called with callback(error, cookies) on complete.."
  },
  {
    "name": "set",
    "description": "Sets a cookie with details, callback will be called with callback(error) on complete.",
    "parameters": [
      {
        "name": "details",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "url",
            "type": "String",
            "collection": false,
            "description": "The url to associate the cookie with.",
            "required": true
          },
          {
            "name": "name",
            "type": "String",
            "collection": false,
            "description": "The name of the cookie. Empty by default if omitted.",
            "required": false
          },
          {
            "name": "value",
            "type": "String",
            "collection": false,
            "description": "The value of the cookie. Empty by default if omitted.",
            "required": false
          },
          {
            "name": "domain",
            "type": "String",
            "collection": false,
            "description": "The domain of the cookie. Empty by default if omitted.",
            "required": false
          },
          {
            "name": "path",
            "type": "String",
            "collection": false,
            "description": "The path of the cookie. Empty by default if omitted.",
            "required": false
          },
          {
            "name": "secure",
            "type": "Boolean",
            "collection": false,
            "description": "Whether the cookie should be marked as Secure. Defaults to false.",
            "required": false
          },
          {
            "name": "httpOnly",
            "type": "Boolean",
            "collection": false,
            "description": "Whether the cookie should be marked as HTTP only. Defaults to false.",
            "required": false
          },
          {
            "name": "expirationDate",
            "type": "Double",
            "collection": false,
            "description": "The expiration date of the cookie as the number of seconds since the UNIX epoch. If omitted then the cookie becomes a session cookie and will not be retained between sessions.",
            "required": false
          }
        ]
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "error",
            "type": "Error",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "cookies.set(details, callback)",
    "type": "instanceMethod",
    "tldr": "Sets a cookie with details, callback will be called with callback(error) on complete.."
  },
  {
    "name": "remove",
    "description": "Removes the cookies matching url and name, callback will called with callback() on complete.",
    "parameters": [
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "description": "The URL associated with the cookie.",
        "required": true
      },
      {
        "name": "name",
        "type": "String",
        "collection": false,
        "description": "The name of cookie to remove.",
        "required": true
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true
      }
    ],
    "title": "cookies.remove(url, name, callback)",
    "type": "instanceMethod",
    "tldr": "Removes the cookies matching url and name, callback will called with callback() on complete.."
  },
  {
    "name": "flushStore",
    "description": "Writes any unwritten cookies data to disk.",
    "parameters": [
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true
      }
    ],
    "title": "cookies.flushStore(callback)",
    "type": "instanceMethod",
    "tldr": "Writes any unwritten cookies data to disk.."
  },
  {
    "name": "changed",
    "description": "Emitted when a cookie is changed because it was added, edited, removed, or expired.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "cookie",
        "type": "Cookie",
        "collection": false,
        "description": "The cookie that was changed.",
        "required": true
      },
      {
        "name": "cause",
        "type": "String",
        "collection": false,
        "description": "The cause of the change with one of the following values:",
        "required": true,
        "possibleValues": [
          {
            "value": "explicit",
            "description": "The cookie was changed directly by a consumer's action."
          },
          {
            "value": "overwrite",
            "description": "The cookie was automatically removed due to an insert operation that overwrote it."
          },
          {
            "value": "expired",
            "description": "The cookie was automatically removed as it expired."
          },
          {
            "value": "evicted",
            "description": "The cookie was automatically evicted during garbage collection."
          },
          {
            "value": "expired-overwrite",
            "description": "The cookie was overwritten with an already-expired expiration date."
          }
        ]
      },
      {
        "name": "removed",
        "type": "Boolean",
        "collection": false,
        "description": "`true` if the cookie was removed, `false` otherwise.",
        "required": true
      }
    ],
    "title": "cookies.on('changed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/cookies#event-changed",
    "tldr": "Emitted when a cookie is changed because it was added, edited, removed, or expired.."
  },
  {
    "name": "attach",
    "description": "Attaches the debugger to the webContents.",
    "parameters": [
      {
        "name": "protocolVersion",
        "type": "String",
        "collection": false,
        "description": "Requested debugging protocol version.",
        "required": false
      }
    ],
    "title": "debugger.attach([protocolVersion])",
    "type": "instanceMethod",
    "tldr": "Attaches the debugger to the webContents.."
  },
  {
    "name": "isAttached",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether a debugger is attached to the webContents."
    },
    "title": "debugger.isAttached()",
    "type": "instanceMethod",
    "tldr": "Returns whether a debugger is attached to the webContents."
  },
  {
    "name": "detach",
    "description": "Detaches the debugger from the webContents.",
    "title": "debugger.detach()",
    "type": "instanceMethod",
    "tldr": "Detaches the debugger from the webContents.."
  },
  {
    "name": "sendCommand",
    "description": "Send given command to the debugging target.",
    "parameters": [
      {
        "name": "method",
        "type": "String",
        "collection": false,
        "description": "Method name, should be one of the methods defined by the remote debugging protocol.",
        "required": true
      },
      {
        "name": "commandParams",
        "type": "Object",
        "collection": false,
        "description": "JSON object with request parameters.",
        "required": false
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "description": "Response",
        "required": false,
        "parameters": [
          {
            "name": "error",
            "type": "Object",
            "collection": false,
            "description": "Error message indicating the failure of the command.",
            "required": true,
            "properties": []
          },
          {
            "name": "result",
            "type": "Any",
            "collection": false,
            "description": "Response defined by the 'returns' attribute of the command description in the remote debugging protocol.",
            "required": true
          }
        ]
      }
    ],
    "title": "debugger.sendCommand(method[, commandParams, callback])",
    "type": "instanceMethod",
    "tldr": "Send given command to the debugging target.."
  },
  {
    "name": "detach",
    "description": "Emitted when debugging session is terminated. This happens either when webContents is closed or devtools is invoked for the attached webContents.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "reason",
        "type": "String",
        "collection": false,
        "description": "Reason for detaching debugger.",
        "required": true
      }
    ],
    "title": "debugger.on('detach')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/debugger#event-detach",
    "tldr": "Emitted when debugging session is terminated."
  },
  {
    "name": "message",
    "description": "Emitted whenever debugging target issues instrumentation event.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "method",
        "type": "String",
        "collection": false,
        "description": "Method name.",
        "required": true
      },
      {
        "name": "params",
        "type": "Object",
        "collection": false,
        "description": "Event parameters defined by the 'parameters' attribute in the remote debugging protocol.",
        "required": true
      }
    ],
    "title": "debugger.on('message')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/debugger#event-message",
    "tldr": "Emitted whenever debugging target issues instrumentation event.."
  },
  {
    "name": "setSavePath",
    "description": "The API is only available in session's will-download callback function. If user doesn't set the save path via the API, Electron will use the original routine to determine the save path(Usually prompts a save dialog).",
    "parameters": [
      {
        "name": "path",
        "type": "String",
        "collection": false,
        "description": "Set the save file path of the download item.",
        "required": true
      }
    ],
    "title": "downloadItem.setSavePath(path)",
    "type": "instanceMethod",
    "tldr": "The API is only available in session's will-download callback function."
  },
  {
    "name": "getSavePath",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The save path of the download item. This will be either the path set via downloadItem.setSavePath(path) or the path selected from the shown save dialog."
    },
    "title": "downloadItem.getSavePath()",
    "type": "instanceMethod",
    "tldr": "Returns the save path of the download item. This will be either the path set via downloadItem.setSavePath(path) or the path selected from the shown save dialog."
  },
  {
    "name": "pause",
    "description": "Pauses the download.",
    "title": "downloadItem.pause()",
    "type": "instanceMethod",
    "tldr": "Pauses the download.."
  },
  {
    "name": "isPaused",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the download is paused."
    },
    "title": "downloadItem.isPaused()",
    "type": "instanceMethod",
    "tldr": "Returns whether the download is paused."
  },
  {
    "name": "resume",
    "description": "Resumes the download that has been paused. Note: To enable resumable downloads the server you are downloading from must support range requests and provide both Last-Modified and ETag header values. Otherwise resume() will dismiss previously received bytes and restart the download from the beginning.",
    "title": "downloadItem.resume()",
    "type": "instanceMethod",
    "tldr": "Resumes the download that has been paused."
  },
  {
    "name": "canResume",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the download can resume."
    },
    "title": "downloadItem.canResume()",
    "type": "instanceMethod",
    "tldr": "Returns whether the download can resume."
  },
  {
    "name": "cancel",
    "description": "Cancels the download operation.",
    "title": "downloadItem.cancel()",
    "type": "instanceMethod",
    "tldr": "Cancels the download operation.."
  },
  {
    "name": "getURL",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The origin url where the item is downloaded from."
    },
    "title": "downloadItem.getURL()",
    "type": "instanceMethod",
    "tldr": "Returns the origin url where the item is downloaded from."
  },
  {
    "name": "getMimeType",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The files mime type."
    },
    "title": "downloadItem.getMimeType()",
    "type": "instanceMethod",
    "tldr": "Returns the files mime type."
  },
  {
    "name": "hasUserGesture",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the download has user gesture."
    },
    "title": "downloadItem.hasUserGesture()",
    "type": "instanceMethod",
    "tldr": "Returns whether the download has user gesture."
  },
  {
    "name": "getFilename",
    "description": "Note: The file name is not always the same as the actual one saved in local disk. If user changes the file name in a prompted download saving dialog, the actual name of saved file will be different.",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The file name of the download item."
    },
    "title": "downloadItem.getFilename()",
    "type": "instanceMethod",
    "tldr": "Note: The file name is not always the same as the actual one saved in local disk."
  },
  {
    "name": "getTotalBytes",
    "description": "If the size is unknown, it returns 0.",
    "returns": {
      "type": "Integer",
      "collection": false,
      "description": "The total size in bytes of the download item."
    },
    "title": "downloadItem.getTotalBytes()",
    "type": "instanceMethod",
    "tldr": "If the size is unknown, it returns 0.."
  },
  {
    "name": "getReceivedBytes",
    "returns": {
      "type": "Integer",
      "collection": false,
      "description": "The received bytes of the download item."
    },
    "title": "downloadItem.getReceivedBytes()",
    "type": "instanceMethod",
    "tldr": "Returns the received bytes of the download item."
  },
  {
    "name": "getContentDisposition",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The Content-Disposition field from the response header."
    },
    "title": "downloadItem.getContentDisposition()",
    "type": "instanceMethod",
    "tldr": "Returns the Content-Disposition field from the response header."
  },
  {
    "name": "getState",
    "description": "Note: The following methods are useful specifically to resume a cancelled item when session is restarted.",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The current state. Can be progressing, completed, cancelled or interrupted.",
      "possibleValues": [
        {
          "value": "progressing"
        },
        {
          "value": "completed"
        },
        {
          "value": "cancelled"
        },
        {
          "value": "interrupted"
        }
      ]
    },
    "title": "downloadItem.getState()",
    "type": "instanceMethod",
    "tldr": "Note: The following methods are useful specifically to resume a cancelled item when session is restarted.."
  },
  {
    "name": "getURLChain",
    "returns": {
      "type": "String",
      "collection": true,
      "description": "The complete url chain of the item including any redirects."
    },
    "title": "downloadItem.getURLChain()",
    "type": "instanceMethod",
    "tldr": "Returns the complete url chain of the item including any redirects."
  },
  {
    "name": "getLastModifiedTime",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "Last-Modified header value."
    },
    "title": "downloadItem.getLastModifiedTime()",
    "type": "instanceMethod",
    "tldr": "Returns last-Modified header value."
  },
  {
    "name": "getETag",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "ETag header value."
    },
    "title": "downloadItem.getETag()",
    "type": "instanceMethod",
    "tldr": "Returns eTag header value."
  },
  {
    "name": "getStartTime",
    "returns": {
      "type": "Double",
      "collection": false,
      "description": "Number of seconds since the UNIX epoch when the download was started."
    },
    "title": "downloadItem.getStartTime()",
    "type": "instanceMethod",
    "tldr": "Returns number of seconds since the UNIX epoch when the download was started."
  },
  {
    "name": "updated",
    "description": "Emitted when the download has been updated and is not done. The state can be one of following:",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "state",
        "type": "String",
        "collection": false,
        "description": "Can be `progressing` or `interrupted`.",
        "required": true,
        "possibleValues": [
          {
            "value": "progressing"
          },
          {
            "value": "interrupted"
          }
        ]
      }
    ],
    "title": "downloadItem.on('updated')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/download-item#event-updated",
    "tldr": "Emitted when the download has been updated and is not done."
  },
  {
    "name": "done",
    "description": "Emitted when the download is in a terminal state. This includes a completed download, a cancelled download (via downloadItem.cancel()), and interrupted download that can't be resumed. The state can be one of following:",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "state",
        "type": "String",
        "collection": false,
        "description": "Can be `completed`, `cancelled` or `interrupted`.",
        "required": true,
        "possibleValues": [
          {
            "value": "completed"
          },
          {
            "value": "cancelled"
          },
          {
            "value": "interrupted"
          }
        ]
      }
    ],
    "title": "downloadItem.on('done')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/download-item#event-done",
    "tldr": "Emitted when the download is in a terminal state."
  },
  {
    "name": "transactions-updated",
    "description": "Emitted when one or more transactions have been updated.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "transactions",
        "type": "Transaction",
        "collection": true,
        "description": "Array of transactions.",
        "required": true
      }
    ],
    "title": "inAppPurchase.on('transactions-updated')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/in-app-purchase#event-transactions-updated",
    "tldr": "Emitted when one or more transactions have been updated.."
  },
  {
    "name": "data",
    "description": "The data event is the usual method of transferring response data into applicative code.",
    "returns": [
      {
        "name": "chunk",
        "type": "Buffer",
        "collection": false,
        "description": "A chunk of response body's data.",
        "required": true
      }
    ],
    "title": "response.on('data')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/incoming-message#event-data",
    "tldr": "The data event is the usual method of transferring response data into applicative code.."
  },
  {
    "name": "end",
    "description": "Indicates that response body has ended.",
    "title": "response.on('end')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/incoming-message#event-end",
    "tldr": "Indicates that response body has ended.."
  },
  {
    "name": "aborted",
    "description": "Emitted when a request has been canceled during an ongoing HTTP transaction.",
    "title": "response.on('aborted')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/incoming-message#event-aborted",
    "tldr": "Emitted when a request has been canceled during an ongoing HTTP transaction.."
  },
  {
    "name": "error",
    "description": "error Error - Typically holds an error string identifying failure root cause. Emitted when an error was encountered while streaming response data events. For instance, if the server closes the underlying while the response is still streaming, an error event will be emitted on the response object and a close event will subsequently follow on the request object.",
    "title": "response.on('error')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/incoming-message#event-error",
    "tldr": "error Error - Typically holds an error string identifying failure root cause."
  },
  {
    "name": "setApplicationMenu",
    "description": "Sets menu as the application menu on macOS. On Windows and Linux, the menu will be set as each window's top menu. Passing null will remove the menu bar on Windows and Linux but has no effect on macOS. Note: This API has to be called after the ready event of app module.",
    "parameters": [
      {
        "name": "menu",
        "type": [
          {
            "typeName": "Menu",
            "collection": false
          },
          {
            "typeName": "null",
            "collection": false
          }
        ],
        "collection": false,
        "required": true
      }
    ],
    "title": "Menu.setApplicationMenu(menu)",
    "type": "staticMethod",
    "tldr": "Sets menu as the application menu on macOS.",
    "url": "https://electronjs.org/docs/api/menu#menusetapplicationmenu"
  },
  {
    "name": "getApplicationMenu",
    "description": "Note: The returned Menu instance doesn't support dynamic addition or removal of menu items. Instance properties can still be dynamically modified.",
    "returns": {
      "type": [
        {
          "typeName": "Menu",
          "collection": false
        },
        {
          "typeName": "null",
          "collection": false
        }
      ],
      "collection": false,
      "description": "The application menu, if set, or null, if not set."
    },
    "title": "Menu.getApplicationMenu()",
    "type": "staticMethod",
    "tldr": "Note: The returned Menu instance doesn't support dynamic addition or removal of menu items.",
    "url": "https://electronjs.org/docs/api/menu#menugetapplicationmenu"
  },
  {
    "name": "sendActionToFirstResponder",
    "platforms": [
      "macOS"
    ],
    "description": "Sends the action to the first responder of application. This is used for emulating default macOS menu behaviors. Usually you would just use the role property of a MenuItem. See the macOS Cocoa Event Handling Guide for more information on macOS' native actions.",
    "parameters": [
      {
        "name": "action",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "Menu.sendActionToFirstResponder(action)",
    "type": "staticMethod",
    "tldr": "Sends the action to the first responder of application.",
    "url": "https://electronjs.org/docs/api/menu#menusendactiontofirstresponder"
  },
  {
    "name": "buildFromTemplate",
    "description": "Generally, the template is just an array of options for constructing a MenuItem. The usage can be referenced above. You can also attach other fields to the element of the template and they will become properties of the constructed menu items.",
    "parameters": [
      {
        "name": "template",
        "type": "MenuItemConstructorOptions",
        "collection": true,
        "required": true
      }
    ],
    "returns": {
      "type": "Menu",
      "collection": false
    },
    "title": "Menu.buildFromTemplate(template)",
    "type": "staticMethod",
    "tldr": "Generally, the template is just an array of options for constructing a MenuItem.",
    "url": "https://electronjs.org/docs/api/menu#menubuildfromtemplate"
  },
  {
    "name": "popup",
    "description": "Pops up this menu as a context menu in the BrowserWindow.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "window",
            "type": "BrowserWindow",
            "collection": false,
            "description": "Default is the focused window.",
            "required": false
          },
          {
            "name": "x",
            "type": "Number",
            "collection": false,
            "description": "Default is the current mouse cursor position. Must be declared if y is declared.",
            "required": false
          },
          {
            "name": "y",
            "type": "Number",
            "collection": false,
            "description": "Default is the current mouse cursor position. Must be declared if x is declared.",
            "required": false
          },
          {
            "name": "positioningItem",
            "type": "Number",
            "collection": false,
            "description": "The index of the menu item to be positioned under the mouse cursor at the specified coordinates. Default is -1.",
            "required": false
          },
          {
            "name": "callback",
            "type": "Function",
            "collection": false,
            "description": "Called when menu is closed.",
            "required": false,
            "parameters": []
          }
        ]
      }
    ],
    "title": "menu.popup(options)",
    "type": "instanceMethod",
    "tldr": "Pops up this menu as a context menu in the BrowserWindow.."
  },
  {
    "name": "closePopup",
    "description": "Closes the context menu in the browserWindow.",
    "parameters": [
      {
        "name": "browserWindow",
        "type": "BrowserWindow",
        "collection": false,
        "description": "Default is the focused window.",
        "required": false
      }
    ],
    "title": "menu.closePopup([browserWindow])",
    "type": "instanceMethod",
    "tldr": "Closes the context menu in the browserWindow.."
  },
  {
    "name": "append",
    "description": "Appends the menuItem to the menu.",
    "parameters": [
      {
        "name": "menuItem",
        "type": "MenuItem",
        "collection": false,
        "required": true
      }
    ],
    "title": "menu.append(menuItem)",
    "type": "instanceMethod",
    "tldr": "Appends the menuItem to the menu.."
  },
  {
    "name": "getMenuItemById",
    "parameters": [
      {
        "name": "id",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "returns": {
      "type": "MenuItem",
      "collection": false,
      "description": "the item with the specified id"
    },
    "title": "menu.getMenuItemById(id)",
    "type": "instanceMethod",
    "tldr": "Returns the item with the specified id"
  },
  {
    "name": "insert",
    "description": "Inserts the menuItem to the pos position of the menu.",
    "parameters": [
      {
        "name": "pos",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "menuItem",
        "type": "MenuItem",
        "collection": false,
        "required": true
      }
    ],
    "title": "menu.insert(pos, menuItem)",
    "type": "instanceMethod",
    "tldr": "Inserts the menuItem to the pos position of the menu.."
  },
  {
    "name": "menu-will-show",
    "description": "Emitted when menu.popup() is called.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "menu.on('menu-will-show')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/menu#event-menu-will-show",
    "tldr": "Emitted when menu.popup() is called.."
  },
  {
    "name": "menu-will-close",
    "description": "Emitted when a popup is closed either manually or with menu.closePopup().",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "menu.on('menu-will-close')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/menu#event-menu-will-close",
    "tldr": "Emitted when a popup is closed either manually or with menu.closePopup().."
  },
  {
    "name": "toPNG",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "scaleFactor",
            "type": "Double",
            "collection": false,
            "description": "Defaults to 1.0.",
            "required": false
          }
        ]
      }
    ],
    "returns": {
      "type": "Buffer",
      "collection": false,
      "description": "A Buffer that contains the image's PNG encoded data."
    },
    "title": "image.toPNG([options])",
    "type": "instanceMethod",
    "tldr": "Returns a Buffer that contains the image's PNG encoded data."
  },
  {
    "name": "toJPEG",
    "parameters": [
      {
        "name": "quality",
        "type": "Integer",
        "collection": false,
        "description": "() Between 0 100.",
        "required": true
      }
    ],
    "returns": {
      "type": "Buffer",
      "collection": false,
      "description": "A Buffer that contains the image's JPEG encoded data."
    },
    "title": "image.toJPEG(quality)",
    "type": "instanceMethod",
    "tldr": "Returns a Buffer that contains the image's JPEG encoded data."
  },
  {
    "name": "toBitmap",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "scaleFactor",
            "type": "Double",
            "collection": false,
            "description": "Defaults to 1.0.",
            "required": false
          }
        ]
      }
    ],
    "returns": {
      "type": "Buffer",
      "collection": false,
      "description": "A Buffer that contains a copy of the image's raw bitmap pixel data."
    },
    "title": "image.toBitmap([options])",
    "type": "instanceMethod",
    "tldr": "Returns a Buffer that contains a copy of the image's raw bitmap pixel data."
  },
  {
    "name": "toDataURL",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "scaleFactor",
            "type": "Double",
            "collection": false,
            "description": "Defaults to 1.0.",
            "required": false
          }
        ]
      }
    ],
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The data URL of the image."
    },
    "title": "image.toDataURL([options])",
    "type": "instanceMethod",
    "tldr": "Returns the data URL of the image."
  },
  {
    "name": "getBitmap",
    "description": "The difference between getBitmap() and toBitmap() is, getBitmap() does not copy the bitmap data, so you have to use the returned Buffer immediately in current event loop tick, otherwise the data might be changed or destroyed.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "scaleFactor",
            "type": "Double",
            "collection": false,
            "description": "Defaults to 1.0.",
            "required": false
          }
        ]
      }
    ],
    "returns": {
      "type": "Buffer",
      "collection": false,
      "description": "A Buffer that contains the image's raw bitmap pixel data."
    },
    "title": "image.getBitmap([options])",
    "type": "instanceMethod",
    "tldr": "The difference between getBitmap() and toBitmap() is, getBitmap() does not copy the bitmap data, so you have to use the returned Buffer immediately in current event loop tick, otherwise the data might be changed or destroyed.."
  },
  {
    "name": "getNativeHandle",
    "platforms": [
      "macOS"
    ],
    "description": "Notice that the returned pointer is a weak pointer to the underlying native image instead of a copy, so you must ensure that the associated nativeImage instance is kept around.",
    "returns": {
      "type": "Buffer",
      "collection": false,
      "description": "A Buffer that stores C pointer to underlying native handle of the image. On macOS, a pointer to NSImage instance would be returned."
    },
    "title": "image.getNativeHandle()",
    "type": "instanceMethod",
    "tldr": "Notice that the returned pointer is a weak pointer to the underlying native image instead of a copy, so you must ensure that the associated nativeImage instance is kept around.."
  },
  {
    "name": "isEmpty",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the image is empty."
    },
    "title": "image.isEmpty()",
    "type": "instanceMethod",
    "tldr": "Returns whether the image is empty."
  },
  {
    "name": "getSize",
    "returns": {
      "type": "Size",
      "collection": false
    },
    "title": "image.getSize()",
    "type": "instanceMethod",
    "tldr": null
  },
  {
    "name": "setTemplateImage",
    "description": "Marks the image as a template image.",
    "parameters": [
      {
        "name": "option",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "image.setTemplateImage(option)",
    "type": "instanceMethod",
    "tldr": "Marks the image as a template image.."
  },
  {
    "name": "isTemplateImage",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the image is a template image."
    },
    "title": "image.isTemplateImage()",
    "type": "instanceMethod",
    "tldr": "Returns whether the image is a template image."
  },
  {
    "name": "crop",
    "parameters": [
      {
        "name": "rect",
        "type": "Rectangle",
        "collection": false,
        "description": "The area of the image to crop.",
        "required": true
      }
    ],
    "returns": {
      "type": "NativeImage",
      "collection": false,
      "description": "The cropped image."
    },
    "title": "image.crop(rect)",
    "type": "instanceMethod",
    "tldr": "Returns the cropped image."
  },
  {
    "name": "resize",
    "description": "If only the height or the width are specified then the current aspect ratio will be preserved in the resized image.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "width",
            "type": "Integer",
            "collection": false,
            "description": "Defaults to the image's width.",
            "required": false
          },
          {
            "name": "height",
            "type": "Integer",
            "collection": false,
            "description": "Defaults to the image's height.",
            "required": false
          },
          {
            "name": "quality",
            "type": "String",
            "collection": false,
            "description": "The desired quality of the resize image. Possible values are good, better or best. The default is best. These values express a desired quality/speed tradeoff. They are translated into an algorithm-specific method that depends on the capabilities (CPU, GPU) of the underlying platform. It is possible for all three methods to be mapped to the same algorithm on a given platform.",
            "required": false
          }
        ]
      }
    ],
    "returns": {
      "type": "NativeImage",
      "collection": false,
      "description": "The resized image."
    },
    "title": "image.resize(options)",
    "type": "instanceMethod",
    "tldr": "If only the height or the width are specified then the current aspect ratio will be preserved in the resized image.."
  },
  {
    "name": "getAspectRatio",
    "returns": {
      "type": "Float",
      "collection": false,
      "description": "The image's aspect ratio."
    },
    "title": "image.getAspectRatio()",
    "type": "instanceMethod",
    "tldr": "Returns the image's aspect ratio."
  },
  {
    "name": "addRepresentation",
    "description": "Add an image representation for a specific scale factor. This can be used to explicitly add different scale factor representations to an image. This can be called on empty images.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "scaleFactor",
            "type": "Double",
            "collection": false,
            "description": "The scale factor to add the image representation for.",
            "required": true
          },
          {
            "name": "width",
            "type": "Integer",
            "collection": false,
            "description": "Defaults to 0. Required if a bitmap buffer is specified as buffer.",
            "required": false
          },
          {
            "name": "height",
            "type": "Integer",
            "collection": false,
            "description": "Defaults to 0. Required if a bitmap buffer is specified as buffer.",
            "required": false
          },
          {
            "name": "buffer",
            "type": "Buffer",
            "collection": false,
            "description": "The buffer containing the raw image data.",
            "required": false
          },
          {
            "name": "dataURL",
            "type": "String",
            "collection": false,
            "description": "The data URL containing either a base 64 encoded PNG or JPEG image.",
            "required": false
          }
        ]
      }
    ],
    "title": "image.addRepresentation(options)",
    "type": "instanceMethod",
    "tldr": "Add an image representation for a specific scale factor."
  },
  {
    "name": "isSupported",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether or not desktop notifications are supported on the current system"
    },
    "title": "Notification.isSupported()",
    "type": "staticMethod",
    "tldr": "Returns whether or not desktop notifications are supported on the current system",
    "url": "https://electronjs.org/docs/api/notification#notificationissupported"
  },
  {
    "name": "show",
    "description": "Immediately shows the notification to the user, please note this means unlike the HTML5 Notification implementation, simply instantiating a new Notification does not immediately show it to the user, you need to call this method before the OS will display it. If the notification has been shown before, this method will dismiss the previously shown notification and create a new one with identical properties.",
    "title": "notification.show()",
    "type": "instanceMethod",
    "tldr": "Immediately shows the notification to the user, please note this means unlike the HTML5 Notification implementation, simply instantiating a new Notification does not immediately show it to the user, you need to call this method before the OS will display it."
  },
  {
    "name": "close",
    "description": "Dismisses the notification.",
    "title": "notification.close()",
    "type": "instanceMethod",
    "tldr": "Dismisses the notification.."
  },
  {
    "name": "show",
    "description": "Emitted when the notification is shown to the user, note this could be fired multiple times as a notification can be shown multiple times through the show() method.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "notification.on('show')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/notification#event-show",
    "tldr": "Emitted when the notification is shown to the user, note this could be fired multiple times as a notification can be shown multiple times through the show() method.."
  },
  {
    "name": "click",
    "description": "Emitted when the notification is clicked by the user.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "notification.on('click')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/notification#event-click",
    "tldr": "Emitted when the notification is clicked by the user.."
  },
  {
    "name": "close",
    "description": "Emitted when the notification is closed by manual intervention from the user. This event is not guaranteed to be emitted in all cases where the notification is closed.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "notification.on('close')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/notification#event-close",
    "tldr": "Emitted when the notification is closed by manual intervention from the user."
  },
  {
    "name": "reply",
    "description": "Emitted when the user clicks the \"Reply\" button on a notification with hasReply: true.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "reply",
        "type": "String",
        "collection": false,
        "description": "The string the user entered into the inline reply field.",
        "required": true
      }
    ],
    "title": "notification.on('reply')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/notification#event-reply",
    "tldr": "Emitted when the user clicks the \"Reply\" button on a notification with hasReply: true.."
  },
  {
    "name": "action",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "index",
        "type": "Number",
        "collection": false,
        "description": "The index of the action that was activated.",
        "required": true
      }
    ],
    "title": "notification.on('action')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/notification#event-action",
    "tldr": null
  },
  {
    "name": "suspend",
    "description": "Emitted when the system is suspending.",
    "title": "powerMonitor.on('suspend')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/power-monitor#event-suspend",
    "tldr": "Emitted when the system is suspending.."
  },
  {
    "name": "resume",
    "description": "Emitted when system is resuming.",
    "title": "powerMonitor.on('resume')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/power-monitor#event-resume",
    "tldr": "Emitted when system is resuming.."
  },
  {
    "name": "on-ac",
    "description": "Emitted when the system changes to AC power.",
    "platforms": [
      "Windows"
    ],
    "title": "powerMonitor.on('on-ac')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/power-monitor#event-on-ac",
    "tldr": "Emitted when the system changes to AC power.."
  },
  {
    "name": "on-battery",
    "description": "Emitted when system changes to battery power.",
    "platforms": [
      "Windows"
    ],
    "title": "powerMonitor.on('on-battery')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/power-monitor#event-on-battery",
    "tldr": "Emitted when system changes to battery power.."
  },
  {
    "name": "shutdown",
    "description": "Emitted when the system is about to reboot or shut down. If the event handler invokes e.preventDefault(), Electron will attempt to delay system shutdown in order for the app to exit cleanly. If e.preventDefault() is called, the app should exit as soon as possible by calling something like app.quit().",
    "platforms": [
      "Linux",
      "macOS"
    ],
    "title": "powerMonitor.on('shutdown')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/power-monitor#event-shutdown",
    "tldr": "Emitted when the system is about to reboot or shut down."
  },
  {
    "name": "loaded",
    "description": "Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main script. It can be used by the preload script to add removed Node global symbols back to the global scope when node integration is turned off:",
    "title": "process.on('loaded')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/process#event-loaded",
    "tldr": "Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main script."
  },
  {
    "name": "display-added",
    "description": "Emitted when newDisplay has been added.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "newDisplay",
        "type": "Display",
        "collection": false,
        "required": true
      }
    ],
    "title": "screen.on('display-added')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/screen#event-display-added",
    "tldr": "Emitted when newDisplay has been added.."
  },
  {
    "name": "display-removed",
    "description": "Emitted when oldDisplay has been removed.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "oldDisplay",
        "type": "Display",
        "collection": false,
        "required": true
      }
    ],
    "title": "screen.on('display-removed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/screen#event-display-removed",
    "tldr": "Emitted when oldDisplay has been removed.."
  },
  {
    "name": "display-metrics-changed",
    "description": "Emitted when one or more metrics change in a display. The changedMetrics is an array of strings that describe the changes. Possible changes are bounds, workArea, scaleFactor and rotation.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "display",
        "type": "Display",
        "collection": false,
        "required": true
      },
      {
        "name": "changedMetrics",
        "type": "String",
        "collection": true,
        "required": true
      }
    ],
    "title": "screen.on('display-metrics-changed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/screen#event-display-metrics-changed",
    "tldr": "Emitted when one or more metrics change in a display."
  },
  {
    "name": "getCacheSize",
    "description": "Callback is invoked with the session's current cache size.",
    "parameters": [
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "size",
            "type": "Integer",
            "collection": false,
            "description": "Cache size used in bytes.",
            "required": true
          }
        ]
      }
    ],
    "title": "ses.getCacheSize(callback)",
    "type": "instanceMethod",
    "tldr": "Callback is invoked with the session's current cache size.."
  },
  {
    "name": "clearCache",
    "description": "Clears the session’s HTTP cache.",
    "parameters": [
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "description": "Called when operation is done.",
        "required": true
      }
    ],
    "title": "ses.clearCache(callback)",
    "type": "instanceMethod",
    "tldr": "Clears the session’s HTTP cache.."
  },
  {
    "name": "clearStorageData",
    "description": "Clears the data of web storages.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "origin",
            "type": "String",
            "collection": false,
            "description": "Should follow window.location.origin’s representation scheme://host:port.",
            "required": false
          },
          {
            "name": "storages",
            "type": "String",
            "collection": true,
            "description": "The types of storages to clear, can contain: appcache, cookies, filesystem, indexdb, localstorage, shadercache, websql, serviceworkers.",
            "required": false
          },
          {
            "name": "quotas",
            "type": "String",
            "collection": true,
            "description": "The types of quotas to clear, can contain: temporary, persistent, syncable.",
            "required": false
          }
        ]
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "description": "Called when operation is done.",
        "required": false
      }
    ],
    "title": "ses.clearStorageData([options, callback])",
    "type": "instanceMethod",
    "tldr": "Clears the data of web storages.."
  },
  {
    "name": "flushStorageData",
    "description": "Writes any unwritten DOMStorage data to disk.",
    "title": "ses.flushStorageData()",
    "type": "instanceMethod",
    "tldr": "Writes any unwritten DOMStorage data to disk.."
  },
  {
    "name": "setProxy",
    "description": "Sets the proxy settings. When pacScript and proxyRules are provided together, the proxyRules option is ignored and pacScript configuration is applied. The proxyRules has to follow the rules below: For example: The proxyBypassRules is a comma separated list of rules described below:",
    "parameters": [
      {
        "name": "config",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "pacScript",
            "type": "String",
            "collection": false,
            "description": "The URL associated with the PAC file.",
            "required": true
          },
          {
            "name": "proxyRules",
            "type": "String",
            "collection": false,
            "description": "Rules indicating which proxies to use.",
            "required": true
          },
          {
            "name": "proxyBypassRules",
            "type": "String",
            "collection": false,
            "description": "Rules indicating which URLs should bypass the proxy settings.",
            "required": true
          }
        ]
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "description": "Called when operation is done.",
        "required": true
      }
    ],
    "title": "ses.setProxy(config, callback)",
    "type": "instanceMethod",
    "tldr": "Sets the proxy settings."
  },
  {
    "name": "resolveProxy",
    "description": "Resolves the proxy information for url. The callback will be called with callback(proxy) when the request is performed.",
    "parameters": [
      {
        "name": "url",
        "type": "URL",
        "collection": false,
        "required": true
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "proxy",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "ses.resolveProxy(url, callback)",
    "type": "instanceMethod",
    "tldr": "Resolves the proxy information for url."
  },
  {
    "name": "setDownloadPath",
    "description": "Sets download saving directory. By default, the download directory will be the Downloads under the respective app folder.",
    "parameters": [
      {
        "name": "path",
        "type": "String",
        "collection": false,
        "description": "The download location.",
        "required": true
      }
    ],
    "title": "ses.setDownloadPath(path)",
    "type": "instanceMethod",
    "tldr": "Sets download saving directory."
  },
  {
    "name": "enableNetworkEmulation",
    "description": "Emulates network with the given configuration for the session.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "offline",
            "type": "Boolean",
            "collection": false,
            "description": "Whether to emulate network outage. Defaults to false.",
            "required": false
          },
          {
            "name": "latency",
            "type": "Double",
            "collection": false,
            "description": "RTT in ms. Defaults to 0 which will disable latency throttling.",
            "required": false
          },
          {
            "name": "downloadThroughput",
            "type": "Double",
            "collection": false,
            "description": "Download rate in Bps. Defaults to 0 which will disable download throttling.",
            "required": false
          },
          {
            "name": "uploadThroughput",
            "type": "Double",
            "collection": false,
            "description": "Upload rate in Bps. Defaults to 0 which will disable upload throttling.",
            "required": false
          }
        ]
      }
    ],
    "title": "ses.enableNetworkEmulation(options)",
    "type": "instanceMethod",
    "tldr": "Emulates network with the given configuration for the session.."
  },
  {
    "name": "disableNetworkEmulation",
    "description": "Disables any network emulation already active for the session. Resets to the original network configuration.",
    "title": "ses.disableNetworkEmulation()",
    "type": "instanceMethod",
    "tldr": "Disables any network emulation already active for the session."
  },
  {
    "name": "setCertificateVerifyProc",
    "description": "Sets the certificate verify proc for session, the proc will be called with proc(request, callback) whenever a server certificate verification is requested. Calling callback(0) accepts the certificate, calling callback(-2) rejects it. Calling setCertificateVerifyProc(null) will revert back to default certificate verify proc.",
    "parameters": [
      {
        "name": "proc",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "request",
            "type": "Object",
            "collection": false,
            "description": "",
            "required": true,
            "properties": [
              {
                "name": "hostname",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "certificate",
                "type": "Certificate",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "verificationResult",
                "type": "String",
                "collection": false,
                "description": "Verification result from chromium.",
                "required": true
              },
              {
                "name": "errorCode",
                "type": "Integer",
                "collection": false,
                "description": "Error code.",
                "required": true
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "collection": false,
            "description": "",
            "required": true,
            "parameters": [
              {
                "name": "verificationResult",
                "type": "Integer",
                "collection": false,
                "description": "Value can be one of certificate error codes from . Apart from the certificate error codes, the following special codes can be used.",
                "required": true
              }
            ]
          }
        ]
      }
    ],
    "title": "ses.setCertificateVerifyProc(proc)",
    "type": "instanceMethod",
    "tldr": "Sets the certificate verify proc for session, the proc will be called with proc(request, callback) whenever a server certificate verification is requested."
  },
  {
    "name": "setPermissionRequestHandler",
    "description": "Sets the handler which can be used to respond to permission requests for the session. Calling callback(true) will allow the permission and callback(false) will reject it. To clear the handler, call setPermissionRequestHandler(null).",
    "parameters": [
      {
        "name": "handler",
        "type": [
          {
            "typeName": "Function",
            "collection": false
          },
          {
            "typeName": "null",
            "collection": false
          }
        ],
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "webContents",
            "type": "WebContents",
            "collection": false,
            "description": "WebContents requesting the permission.",
            "required": true
          },
          {
            "name": "permission",
            "type": "String",
            "collection": false,
            "description": "Enum of 'media', 'geolocation', 'notifications', 'midiSysex', 'pointerLock', 'fullscreen', 'openExternal'.",
            "required": true
          },
          {
            "name": "callback",
            "type": "Function",
            "collection": false,
            "description": "",
            "required": true,
            "parameters": [
              {
                "name": "permissionGranted",
                "type": "Boolean",
                "collection": false,
                "description": "Allow or deny the permission.",
                "required": true
              }
            ]
          },
          {
            "name": "details",
            "type": "Object",
            "collection": false,
            "description": "Some properties are only available on certain permission types.",
            "required": true,
            "properties": [
              {
                "name": "externalURL",
                "type": "String",
                "collection": false,
                "description": "The url of the openExternal request.",
                "required": true
              }
            ]
          }
        ]
      }
    ],
    "title": "ses.setPermissionRequestHandler(handler)",
    "type": "instanceMethod",
    "tldr": "Sets the handler which can be used to respond to permission requests for the session."
  },
  {
    "name": "clearHostResolverCache",
    "description": "Clears the host resolver cache.",
    "parameters": [
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "description": "Called when operation is done.",
        "required": false
      }
    ],
    "title": "ses.clearHostResolverCache([callback])",
    "type": "instanceMethod",
    "tldr": "Clears the host resolver cache.."
  },
  {
    "name": "allowNTLMCredentialsForDomains",
    "description": "Dynamically sets whether to always send credentials for HTTP NTLM or Negotiate authentication.",
    "parameters": [
      {
        "name": "domains",
        "type": "String",
        "collection": false,
        "description": "A comma-separated list of servers for which integrated authentication is enabled.",
        "required": true
      }
    ],
    "title": "ses.allowNTLMCredentialsForDomains(domains)",
    "type": "instanceMethod",
    "tldr": "Dynamically sets whether to always send credentials for HTTP NTLM or Negotiate authentication.."
  },
  {
    "name": "setUserAgent",
    "description": "Overrides the userAgent and acceptLanguages for this session. The acceptLanguages must a comma separated ordered list of language codes, for example \"en-US,fr,de,ko,zh-CN,ja\". This doesn't affect existing WebContents, and each WebContents can use webContents.setUserAgent to override the session-wide user agent.",
    "parameters": [
      {
        "name": "userAgent",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "acceptLanguages",
        "type": "String",
        "collection": false,
        "required": false
      }
    ],
    "title": "ses.setUserAgent(userAgent[, acceptLanguages])",
    "type": "instanceMethod",
    "tldr": "Overrides the userAgent and acceptLanguages for this session."
  },
  {
    "name": "getUserAgent",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The user agent for this session."
    },
    "title": "ses.getUserAgent()",
    "type": "instanceMethod",
    "tldr": "Returns the user agent for this session."
  },
  {
    "name": "getBlobData",
    "parameters": [
      {
        "name": "identifier",
        "type": "String",
        "collection": false,
        "description": "Valid UUID.",
        "required": true
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "result",
            "type": "Buffer",
            "collection": false,
            "description": "Blob data.",
            "required": true
          }
        ]
      }
    ],
    "title": "ses.getBlobData(identifier, callback)",
    "type": "instanceMethod",
    "tldr": null
  },
  {
    "name": "createInterruptedDownload",
    "description": "Allows resuming cancelled or interrupted downloads from previous Session. The API will generate a DownloadItem that can be accessed with the will-download event. The DownloadItem will not have any WebContents associated with it and the initial state will be interrupted. The download will start only when the resume API is called on the DownloadItem.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "path",
            "type": "String",
            "collection": false,
            "description": "Absolute path of the download.",
            "required": true
          },
          {
            "name": "urlChain",
            "type": "String",
            "collection": true,
            "description": "Complete URL chain for the download.",
            "required": true
          },
          {
            "name": "mimeType",
            "type": "String",
            "collection": false,
            "description": "",
            "required": false
          },
          {
            "name": "offset",
            "type": "Integer",
            "collection": false,
            "description": "Start range for the download.",
            "required": true
          },
          {
            "name": "length",
            "type": "Integer",
            "collection": false,
            "description": "Total length of the download.",
            "required": true
          },
          {
            "name": "lastModified",
            "type": "String",
            "collection": false,
            "description": "Last-Modified header value.",
            "required": true
          },
          {
            "name": "eTag",
            "type": "String",
            "collection": false,
            "description": "ETag header value.",
            "required": true
          },
          {
            "name": "startTime",
            "type": "Double",
            "collection": false,
            "description": "Time when download was started in number of seconds since UNIX epoch.",
            "required": false
          }
        ]
      }
    ],
    "title": "ses.createInterruptedDownload(options)",
    "type": "instanceMethod",
    "tldr": "Allows resuming cancelled or interrupted downloads from previous Session."
  },
  {
    "name": "clearAuthCache",
    "description": "Clears the session’s HTTP authentication cache.",
    "parameters": [
      {
        "name": "options",
        "type": [
          {
            "typeName": "RemovePassword",
            "collection": false
          },
          {
            "typeName": "RemoveClientCertificate",
            "collection": false
          }
        ],
        "collection": false,
        "required": true
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "description": "Called when operation is done.",
        "required": false
      }
    ],
    "title": "ses.clearAuthCache(options[, callback])",
    "type": "instanceMethod",
    "tldr": "Clears the session’s HTTP authentication cache.."
  },
  {
    "name": "setPreloads",
    "description": "Adds scripts that will be executed on ALL web contents that are associated with this session just before normal preload scripts run.",
    "parameters": [
      {
        "name": "preloads",
        "type": "String",
        "collection": true,
        "description": "An array of absolute path to preload scripts",
        "required": true
      }
    ],
    "title": "ses.setPreloads(preloads)",
    "type": "instanceMethod",
    "tldr": "Adds scripts that will be executed on ALL web contents that are associated with this session just before normal preload scripts run.."
  },
  {
    "name": "getPreloads",
    "returns": {
      "type": "String",
      "collection": true,
      "description": "an array of paths to preload scripts that have been registered."
    },
    "title": "ses.getPreloads()",
    "type": "instanceMethod",
    "tldr": "Returns an array of paths to preload scripts that have been registered."
  },
  {
    "name": "will-download",
    "description": "Emitted when Electron is about to download item in webContents. Calling event.preventDefault() will cancel the download and item will not be available from next tick of the process.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "item",
        "type": "DownloadItem",
        "collection": false,
        "required": true
      },
      {
        "name": "webContents",
        "type": "WebContents",
        "collection": false,
        "required": true
      }
    ],
    "title": "ses.on('will-download')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/session#event-will-download",
    "tldr": "Emitted when Electron is about to download item in webContents."
  },
  {
    "name": "accent-color-changed",
    "platforms": [
      "Windows"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "newColor",
        "type": "String",
        "collection": false,
        "description": "The new RGBA color the user assigned to be their system accent color.",
        "required": true
      }
    ],
    "title": "systemPreferences.on('accent-color-changed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/system-preferences#event-accent-color-changed",
    "tldr": null
  },
  {
    "name": "color-changed",
    "platforms": [
      "Windows"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "systemPreferences.on('color-changed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/system-preferences#event-color-changed",
    "tldr": null
  },
  {
    "name": "inverted-color-scheme-changed",
    "platforms": [
      "Windows"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "invertedColorScheme",
        "type": "Boolean",
        "collection": false,
        "description": "`true` if an inverted color scheme, such as a high contrast theme, is being used, `false` otherwise.",
        "required": true
      }
    ],
    "title": "systemPreferences.on('inverted-color-scheme-changed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/system-preferences#event-inverted-color-scheme-changed",
    "tldr": null
  },
  {
    "name": "destroy",
    "description": "Destroys the tray icon immediately.",
    "title": "tray.destroy()",
    "type": "instanceMethod",
    "tldr": "Destroys the tray icon immediately.."
  },
  {
    "name": "setImage",
    "description": "Sets the image associated with this tray icon.",
    "parameters": [
      {
        "name": "image",
        "type": [
          {
            "typeName": "NativeImage",
            "collection": false
          },
          {
            "typeName": "String",
            "collection": false
          }
        ],
        "collection": false,
        "required": true
      }
    ],
    "title": "tray.setImage(image)",
    "type": "instanceMethod",
    "tldr": "Sets the image associated with this tray icon.."
  },
  {
    "name": "setPressedImage",
    "platforms": [
      "macOS"
    ],
    "description": "Sets the image associated with this tray icon when pressed on macOS.",
    "parameters": [
      {
        "name": "image",
        "type": "NativeImage",
        "collection": false,
        "required": true
      }
    ],
    "title": "tray.setPressedImage(image)",
    "type": "instanceMethod",
    "tldr": "Sets the image associated with this tray icon when pressed on macOS.."
  },
  {
    "name": "setToolTip",
    "description": "Sets the hover text for this tray icon.",
    "parameters": [
      {
        "name": "toolTip",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "tray.setToolTip(toolTip)",
    "type": "instanceMethod",
    "tldr": "Sets the hover text for this tray icon.."
  },
  {
    "name": "setTitle",
    "platforms": [
      "macOS"
    ],
    "description": "Sets the title displayed aside of the tray icon in the status bar (Support ANSI colors).",
    "parameters": [
      {
        "name": "title",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "tray.setTitle(title)",
    "type": "instanceMethod",
    "tldr": "Sets the title displayed aside of the tray icon in the status bar (Support ANSI colors).."
  },
  {
    "name": "setHighlightMode",
    "platforms": [
      "macOS"
    ],
    "description": "Sets when the tray's icon background becomes highlighted (in blue). Note: You can use highlightMode with a BrowserWindow by toggling between 'never' and 'always' modes when the window visibility changes.",
    "parameters": [
      {
        "name": "mode",
        "type": "String",
        "collection": false,
        "description": "Highlight mode with one of the following values:",
        "required": true,
        "possibleValues": [
          {
            "value": "selection",
            "description": "Highlight the tray icon when it is clicked and also when its context menu is open. This is the default."
          },
          {
            "value": "always",
            "description": "Always highlight the tray icon."
          },
          {
            "value": "never",
            "description": "Never highlight the tray icon."
          }
        ]
      }
    ],
    "title": "tray.setHighlightMode(mode)",
    "type": "instanceMethod",
    "tldr": "Sets when the tray's icon background becomes highlighted (in blue)."
  },
  {
    "name": "displayBalloon",
    "platforms": [
      "Windows"
    ],
    "description": "Displays a tray balloon.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "icon",
            "type": [
              {
                "typeName": "NativeImage",
                "collection": false
              },
              {
                "typeName": "String",
                "collection": false
              }
            ],
            "collection": false,
            "description": "-",
            "required": false
          },
          {
            "name": "title",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "content",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "tray.displayBalloon(options)",
    "type": "instanceMethod",
    "tldr": "Displays a tray balloon.."
  },
  {
    "name": "popUpContextMenu",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "Pops up the context menu of the tray icon. When menu is passed, the menu will be shown instead of the tray icon's context menu. The position is only available on Windows, and it is (0, 0) by default.",
    "parameters": [
      {
        "name": "menu",
        "type": "Menu",
        "collection": false,
        "required": false
      },
      {
        "name": "position",
        "type": "Point",
        "collection": false,
        "description": "The pop up position.",
        "required": false
      }
    ],
    "title": "tray.popUpContextMenu([menu, position])",
    "type": "instanceMethod",
    "tldr": "Pops up the context menu of the tray icon."
  },
  {
    "name": "setContextMenu",
    "description": "Sets the context menu for this icon.",
    "parameters": [
      {
        "name": "menu",
        "type": "Menu",
        "collection": false,
        "required": true
      }
    ],
    "title": "tray.setContextMenu(menu)",
    "type": "instanceMethod",
    "tldr": "Sets the context menu for this icon.."
  },
  {
    "name": "getBounds",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "description": "The bounds of this tray icon as Object.",
    "returns": {
      "type": "Rectangle",
      "collection": false
    },
    "title": "tray.getBounds()",
    "type": "instanceMethod",
    "tldr": "The bounds of this tray icon as Object.."
  },
  {
    "name": "isDestroyed",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the tray icon is destroyed."
    },
    "title": "tray.isDestroyed()",
    "type": "instanceMethod",
    "tldr": "Returns whether the tray icon is destroyed."
  },
  {
    "name": "click",
    "description": "Emitted when the tray icon is clicked.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "bounds",
        "type": "Rectangle",
        "collection": false,
        "description": "The bounds of tray icon.",
        "required": true
      },
      {
        "name": "position",
        "type": "Point",
        "collection": false,
        "description": "The position of the event.",
        "required": true
      }
    ],
    "title": "tray.on('click')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-click",
    "tldr": "Emitted when the tray icon is clicked.."
  },
  {
    "name": "right-click",
    "description": "Emitted when the tray icon is right clicked.",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "bounds",
        "type": "Rectangle",
        "collection": false,
        "description": "The bounds of tray icon.",
        "required": true
      }
    ],
    "title": "tray.on('right-click')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-right-click",
    "tldr": "Emitted when the tray icon is right clicked.."
  },
  {
    "name": "double-click",
    "description": "Emitted when the tray icon is double clicked.",
    "platforms": [
      "macOS",
      "Windows"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "bounds",
        "type": "Rectangle",
        "collection": false,
        "description": "The bounds of tray icon.",
        "required": true
      }
    ],
    "title": "tray.on('double-click')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-double-click",
    "tldr": "Emitted when the tray icon is double clicked.."
  },
  {
    "name": "balloon-show",
    "description": "Emitted when the tray balloon shows.",
    "platforms": [
      "Windows"
    ],
    "title": "tray.on('balloon-show')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-balloon-show",
    "tldr": "Emitted when the tray balloon shows.."
  },
  {
    "name": "balloon-click",
    "description": "Emitted when the tray balloon is clicked.",
    "platforms": [
      "Windows"
    ],
    "title": "tray.on('balloon-click')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-balloon-click",
    "tldr": "Emitted when the tray balloon is clicked.."
  },
  {
    "name": "balloon-closed",
    "description": "Emitted when the tray balloon is closed because of timeout or user manually closes it.",
    "platforms": [
      "Windows"
    ],
    "title": "tray.on('balloon-closed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-balloon-closed",
    "tldr": "Emitted when the tray balloon is closed because of timeout or user manually closes it.."
  },
  {
    "name": "drop",
    "description": "Emitted when any dragged items are dropped on the tray icon.",
    "platforms": [
      "macOS"
    ],
    "title": "tray.on('drop')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-drop",
    "tldr": "Emitted when any dragged items are dropped on the tray icon.."
  },
  {
    "name": "drop-files",
    "description": "Emitted when dragged files are dropped in the tray icon.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "files",
        "type": "String",
        "collection": true,
        "description": "The paths of the dropped files.",
        "required": true
      }
    ],
    "title": "tray.on('drop-files')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-drop-files",
    "tldr": "Emitted when dragged files are dropped in the tray icon.."
  },
  {
    "name": "drop-text",
    "description": "Emitted when dragged text is dropped in the tray icon.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "text",
        "type": "String",
        "collection": false,
        "description": "the dropped text string.",
        "required": true
      }
    ],
    "title": "tray.on('drop-text')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-drop-text",
    "tldr": "Emitted when dragged text is dropped in the tray icon.."
  },
  {
    "name": "drag-enter",
    "description": "Emitted when a drag operation enters the tray icon.",
    "platforms": [
      "macOS"
    ],
    "title": "tray.on('drag-enter')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-drag-enter",
    "tldr": "Emitted when a drag operation enters the tray icon.."
  },
  {
    "name": "drag-leave",
    "description": "Emitted when a drag operation exits the tray icon.",
    "platforms": [
      "macOS"
    ],
    "title": "tray.on('drag-leave')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-drag-leave",
    "tldr": "Emitted when a drag operation exits the tray icon.."
  },
  {
    "name": "drag-end",
    "description": "Emitted when a drag operation ends on the tray or ends at another location.",
    "platforms": [
      "macOS"
    ],
    "title": "tray.on('drag-end')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-drag-end",
    "tldr": "Emitted when a drag operation ends on the tray or ends at another location.."
  },
  {
    "name": "mouse-enter",
    "description": "Emitted when the mouse enters the tray icon.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "position",
        "type": "Point",
        "collection": false,
        "description": "The position of the event.",
        "required": true
      }
    ],
    "title": "tray.on('mouse-enter')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-mouse-enter",
    "tldr": "Emitted when the mouse enters the tray icon.."
  },
  {
    "name": "mouse-leave",
    "description": "Emitted when the mouse exits the tray icon.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "position",
        "type": "Point",
        "collection": false,
        "description": "The position of the event.",
        "required": true
      }
    ],
    "title": "tray.on('mouse-leave')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-mouse-leave",
    "tldr": "Emitted when the mouse exits the tray icon.."
  },
  {
    "name": "mouse-move",
    "description": "Emitted when the mouse moves in the tray icon.",
    "platforms": [
      "macOS"
    ],
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "position",
        "type": "Point",
        "collection": false,
        "description": "The position of the event.",
        "required": true
      }
    ],
    "title": "tray.on('mouse-move')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/tray#event-mouse-move",
    "tldr": "Emitted when the mouse moves in the tray icon.."
  },
  {
    "name": "loadURL",
    "description": "Loads the url in the window. The url must contain the protocol prefix, e.g. the http:// or file://. If the load should bypass http cache then use the pragma header to achieve it.",
    "parameters": [
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "httpReferrer",
            "type": "String",
            "collection": false,
            "description": "A HTTP Referrer url.",
            "required": false
          },
          {
            "name": "userAgent",
            "type": "String",
            "collection": false,
            "description": "A user agent originating the request.",
            "required": false
          },
          {
            "name": "extraHeaders",
            "type": "String",
            "collection": false,
            "description": "Extra headers separated by \"\\n\".",
            "required": false
          },
          {
            "name": "postData",
            "type": [
              {
                "typeName": "UploadRawData",
                "collection": true
              },
              {
                "typeName": "UploadFile",
                "collection": true
              },
              {
                "typeName": "UploadFileSystem",
                "collection": true
              },
              {
                "typeName": "UploadBlob",
                "collection": true
              }
            ],
            "collection": false,
            "description": "",
            "required": false
          },
          {
            "name": "baseURLForDataURL",
            "type": "String",
            "collection": false,
            "description": "Base url (with trailing path separator) for files to be loaded by the data url. This is needed only if the specified url is a data url and needs to load other files.",
            "required": false
          }
        ]
      }
    ],
    "title": "contents.loadURL(url[, options])",
    "type": "instanceMethod",
    "tldr": "Loads the url in the window."
  },
  {
    "name": "loadFile",
    "description": "Loads the given file in the window, filePath should be a path to an HTML file relative to the root of your application.  For instance an app structure like this: Would require code like this",
    "parameters": [
      {
        "name": "filePath",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.loadFile(filePath)",
    "type": "instanceMethod",
    "tldr": "Loads the given file in the window, filePath should be a path to an HTML file relative to the root of your application."
  },
  {
    "name": "downloadURL",
    "description": "Initiates a download of the resource at url without navigating. The will-download event of session will be triggered.",
    "parameters": [
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.downloadURL(url)",
    "type": "instanceMethod",
    "tldr": "Initiates a download of the resource at url without navigating."
  },
  {
    "name": "getURL",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The URL of the current web page."
    },
    "title": "contents.getURL()",
    "type": "instanceMethod",
    "tldr": "Returns the URL of the current web page."
  },
  {
    "name": "getTitle",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The title of the current web page."
    },
    "title": "contents.getTitle()",
    "type": "instanceMethod",
    "tldr": "Returns the title of the current web page."
  },
  {
    "name": "isDestroyed",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the web page is destroyed."
    },
    "title": "contents.isDestroyed()",
    "type": "instanceMethod",
    "tldr": "Returns whether the web page is destroyed."
  },
  {
    "name": "focus",
    "description": "Focuses the web page.",
    "title": "contents.focus()",
    "type": "instanceMethod",
    "tldr": "Focuses the web page.."
  },
  {
    "name": "isFocused",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the web page is focused."
    },
    "title": "contents.isFocused()",
    "type": "instanceMethod",
    "tldr": "Returns whether the web page is focused."
  },
  {
    "name": "isLoading",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether web page is still loading resources."
    },
    "title": "contents.isLoading()",
    "type": "instanceMethod",
    "tldr": "Returns whether web page is still loading resources."
  },
  {
    "name": "isLoadingMainFrame",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the main frame (and not just iframes or frames within it) is still loading."
    },
    "title": "contents.isLoadingMainFrame()",
    "type": "instanceMethod",
    "tldr": "Returns whether the main frame (and not just iframes or frames within it) is still loading."
  },
  {
    "name": "isWaitingForResponse",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the web page is waiting for a first-response from the main resource of the page."
    },
    "title": "contents.isWaitingForResponse()",
    "type": "instanceMethod",
    "tldr": "Returns whether the web page is waiting for a first-response from the main resource of the page."
  },
  {
    "name": "stop",
    "description": "Stops any pending navigation.",
    "title": "contents.stop()",
    "type": "instanceMethod",
    "tldr": "Stops any pending navigation.."
  },
  {
    "name": "reload",
    "description": "Reloads the current web page.",
    "title": "contents.reload()",
    "type": "instanceMethod",
    "tldr": "Reloads the current web page.."
  },
  {
    "name": "reloadIgnoringCache",
    "description": "Reloads current page and ignores cache.",
    "title": "contents.reloadIgnoringCache()",
    "type": "instanceMethod",
    "tldr": "Reloads current page and ignores cache.."
  },
  {
    "name": "canGoBack",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the browser can go back to previous web page."
    },
    "title": "contents.canGoBack()",
    "type": "instanceMethod",
    "tldr": "Returns whether the browser can go back to previous web page."
  },
  {
    "name": "canGoForward",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the browser can go forward to next web page."
    },
    "title": "contents.canGoForward()",
    "type": "instanceMethod",
    "tldr": "Returns whether the browser can go forward to next web page."
  },
  {
    "name": "canGoToOffset",
    "parameters": [
      {
        "name": "offset",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the web page can go to offset."
    },
    "title": "contents.canGoToOffset(offset)",
    "type": "instanceMethod",
    "tldr": "Returns whether the web page can go to offset."
  },
  {
    "name": "clearHistory",
    "description": "Clears the navigation history.",
    "title": "contents.clearHistory()",
    "type": "instanceMethod",
    "tldr": "Clears the navigation history.."
  },
  {
    "name": "goBack",
    "description": "Makes the browser go back a web page.",
    "title": "contents.goBack()",
    "type": "instanceMethod",
    "tldr": "Makes the browser go back a web page.."
  },
  {
    "name": "goForward",
    "description": "Makes the browser go forward a web page.",
    "title": "contents.goForward()",
    "type": "instanceMethod",
    "tldr": "Makes the browser go forward a web page.."
  },
  {
    "name": "goToIndex",
    "description": "Navigates browser to the specified absolute web page index.",
    "parameters": [
      {
        "name": "index",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.goToIndex(index)",
    "type": "instanceMethod",
    "tldr": "Navigates browser to the specified absolute web page index.."
  },
  {
    "name": "goToOffset",
    "description": "Navigates to the specified offset from the \"current entry\".",
    "parameters": [
      {
        "name": "offset",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.goToOffset(offset)",
    "type": "instanceMethod",
    "tldr": "Navigates to the specified offset from the \"current entry\".."
  },
  {
    "name": "isCrashed",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the renderer process has crashed."
    },
    "title": "contents.isCrashed()",
    "type": "instanceMethod",
    "tldr": "Returns whether the renderer process has crashed."
  },
  {
    "name": "setUserAgent",
    "description": "Overrides the user agent for this web page.",
    "parameters": [
      {
        "name": "userAgent",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.setUserAgent(userAgent)",
    "type": "instanceMethod",
    "tldr": "Overrides the user agent for this web page.."
  },
  {
    "name": "getUserAgent",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "The user agent for this web page."
    },
    "title": "contents.getUserAgent()",
    "type": "instanceMethod",
    "tldr": "Returns the user agent for this web page."
  },
  {
    "name": "insertCSS",
    "description": "Injects CSS into the current web page.",
    "parameters": [
      {
        "name": "css",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.insertCSS(css)",
    "type": "instanceMethod",
    "tldr": "Injects CSS into the current web page.."
  },
  {
    "name": "executeJavaScript",
    "description": "Evaluates code in page. In the browser window some HTML APIs like requestFullScreen can only be invoked by a gesture from the user. Setting userGesture to true will remove this limitation. If the result of the executed code is a promise the callback result will be the resolved value of the promise. We recommend that you use the returned Promise to handle code that results in a Promise.",
    "parameters": [
      {
        "name": "code",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "userGesture",
        "type": "Boolean",
        "collection": false,
        "description": "Default is `false`.",
        "required": false
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "description": "Called after script has been executed.",
        "required": false,
        "parameters": [
          {
            "name": "result",
            "type": "Any",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "returns": {
      "type": "Promise",
      "collection": false,
      "description": "A promise that resolves with the result of the executed code or is rejected if the result of the code is a rejected promise."
    },
    "title": "contents.executeJavaScript(code[, userGesture, callback])",
    "type": "instanceMethod",
    "tldr": "Evaluates code in page."
  },
  {
    "name": "setIgnoreMenuShortcuts",
    "platforms": [
      "Experimental"
    ],
    "description": "Ignore application menu shortcuts while this web contents is focused.",
    "parameters": [
      {
        "name": "ignore",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.setIgnoreMenuShortcuts(ignore)",
    "type": "instanceMethod",
    "tldr": "Ignore application menu shortcuts while this web contents is focused.."
  },
  {
    "name": "setAudioMuted",
    "description": "Mute the audio on the current web page.",
    "parameters": [
      {
        "name": "muted",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.setAudioMuted(muted)",
    "type": "instanceMethod",
    "tldr": "Mute the audio on the current web page.."
  },
  {
    "name": "isAudioMuted",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether this page has been muted."
    },
    "title": "contents.isAudioMuted()",
    "type": "instanceMethod",
    "tldr": "Returns whether this page has been muted."
  },
  {
    "name": "setZoomFactor",
    "description": "Changes the zoom factor to the specified factor. Zoom factor is zoom percent divided by 100, so 300% = 3.0.",
    "parameters": [
      {
        "name": "factor",
        "type": "Number",
        "collection": false,
        "description": "Zoom factor.",
        "required": true
      }
    ],
    "title": "contents.setZoomFactor(factor)",
    "type": "instanceMethod",
    "tldr": "Changes the zoom factor to the specified factor."
  },
  {
    "name": "getZoomFactor",
    "description": "Sends a request to get current zoom factor, the callback will be called with callback(zoomFactor).",
    "parameters": [
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "zoomFactor",
            "type": "Number",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.getZoomFactor(callback)",
    "type": "instanceMethod",
    "tldr": "Sends a request to get current zoom factor, the callback will be called with callback(zoomFactor).."
  },
  {
    "name": "setZoomLevel",
    "description": "Changes the zoom level to the specified level. The original size is 0 and each increment above or below represents zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively. The formula for this is scale := 1.2 ^ level.",
    "parameters": [
      {
        "name": "level",
        "type": "Number",
        "collection": false,
        "description": "Zoom level.",
        "required": true
      }
    ],
    "title": "contents.setZoomLevel(level)",
    "type": "instanceMethod",
    "tldr": "Changes the zoom level to the specified level."
  },
  {
    "name": "getZoomLevel",
    "description": "Sends a request to get current zoom level, the callback will be called with callback(zoomLevel).",
    "parameters": [
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "zoomLevel",
            "type": "Number",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.getZoomLevel(callback)",
    "type": "instanceMethod",
    "tldr": "Sends a request to get current zoom level, the callback will be called with callback(zoomLevel).."
  },
  {
    "name": "setVisualZoomLevelLimits",
    "description": "Sets the maximum and minimum pinch-to-zoom level.",
    "parameters": [
      {
        "name": "minimumLevel",
        "type": "Number",
        "collection": false,
        "required": true
      },
      {
        "name": "maximumLevel",
        "type": "Number",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.setVisualZoomLevelLimits(minimumLevel, maximumLevel)",
    "type": "instanceMethod",
    "tldr": "Sets the maximum and minimum pinch-to-zoom level.."
  },
  {
    "name": "setLayoutZoomLevelLimits",
    "description": "Sets the maximum and minimum layout-based (i.e. non-visual) zoom level.",
    "parameters": [
      {
        "name": "minimumLevel",
        "type": "Number",
        "collection": false,
        "required": true
      },
      {
        "name": "maximumLevel",
        "type": "Number",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.setLayoutZoomLevelLimits(minimumLevel, maximumLevel)",
    "type": "instanceMethod",
    "tldr": "Sets the maximum and minimum layout-based (i.e."
  },
  {
    "name": "undo",
    "description": "Executes the editing command undo in web page.",
    "title": "contents.undo()",
    "type": "instanceMethod",
    "tldr": "Executes the editing command undo in web page.."
  },
  {
    "name": "redo",
    "description": "Executes the editing command redo in web page.",
    "title": "contents.redo()",
    "type": "instanceMethod",
    "tldr": "Executes the editing command redo in web page.."
  },
  {
    "name": "cut",
    "description": "Executes the editing command cut in web page.",
    "title": "contents.cut()",
    "type": "instanceMethod",
    "tldr": "Executes the editing command cut in web page.."
  },
  {
    "name": "copy",
    "description": "Executes the editing command copy in web page.",
    "title": "contents.copy()",
    "type": "instanceMethod",
    "tldr": "Executes the editing command copy in web page.."
  },
  {
    "name": "copyImageAt",
    "description": "Copy the image at the given position to the clipboard.",
    "parameters": [
      {
        "name": "x",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "y",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.copyImageAt(x, y)",
    "type": "instanceMethod",
    "tldr": "Copy the image at the given position to the clipboard.."
  },
  {
    "name": "paste",
    "description": "Executes the editing command paste in web page.",
    "title": "contents.paste()",
    "type": "instanceMethod",
    "tldr": "Executes the editing command paste in web page.."
  },
  {
    "name": "pasteAndMatchStyle",
    "description": "Executes the editing command pasteAndMatchStyle in web page.",
    "title": "contents.pasteAndMatchStyle()",
    "type": "instanceMethod",
    "tldr": "Executes the editing command pasteAndMatchStyle in web page.."
  },
  {
    "name": "delete",
    "description": "Executes the editing command delete in web page.",
    "title": "contents.delete()",
    "type": "instanceMethod",
    "tldr": "Executes the editing command delete in web page.."
  },
  {
    "name": "selectAll",
    "description": "Executes the editing command selectAll in web page.",
    "title": "contents.selectAll()",
    "type": "instanceMethod",
    "tldr": "Executes the editing command selectAll in web page.."
  },
  {
    "name": "unselect",
    "description": "Executes the editing command unselect in web page.",
    "title": "contents.unselect()",
    "type": "instanceMethod",
    "tldr": "Executes the editing command unselect in web page.."
  },
  {
    "name": "replace",
    "description": "Executes the editing command replace in web page.",
    "parameters": [
      {
        "name": "text",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.replace(text)",
    "type": "instanceMethod",
    "tldr": "Executes the editing command replace in web page.."
  },
  {
    "name": "replaceMisspelling",
    "description": "Executes the editing command replaceMisspelling in web page.",
    "parameters": [
      {
        "name": "text",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.replaceMisspelling(text)",
    "type": "instanceMethod",
    "tldr": "Executes the editing command replaceMisspelling in web page.."
  },
  {
    "name": "insertText",
    "description": "Inserts text to the focused element.",
    "parameters": [
      {
        "name": "text",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.insertText(text)",
    "type": "instanceMethod",
    "tldr": "Inserts text to the focused element.."
  },
  {
    "name": "findInPage",
    "description": "Starts a request to find all matches for the text in the web page. The result of the request can be obtained by subscribing to found-in-page event.",
    "parameters": [
      {
        "name": "text",
        "type": "String",
        "collection": false,
        "description": "Content to be searched, must not be empty.",
        "required": true
      },
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "forward",
            "type": "Boolean",
            "collection": false,
            "description": "Whether to search forward or backward, defaults to true.",
            "required": false
          },
          {
            "name": "findNext",
            "type": "Boolean",
            "collection": false,
            "description": "Whether the operation is first request or a follow up, defaults to false.",
            "required": false
          },
          {
            "name": "matchCase",
            "type": "Boolean",
            "collection": false,
            "description": "Whether search should be case-sensitive, defaults to false.",
            "required": false
          },
          {
            "name": "wordStart",
            "type": "Boolean",
            "collection": false,
            "description": "Whether to look only at the start of words. defaults to false.",
            "required": false
          },
          {
            "name": "medialCapitalAsWordStart",
            "type": "Boolean",
            "collection": false,
            "description": "When combined with wordStart, accepts a match in the middle of a word if the match begins with an uppercase letter followed by a lowercase or non-letter. Accepts several other intra-word matches, defaults to false.",
            "required": false
          }
        ]
      }
    ],
    "returns": {
      "type": "Integer",
      "collection": false,
      "description": "The request id used for the request."
    },
    "title": "contents.findInPage(text[, options])",
    "type": "instanceMethod",
    "tldr": "Starts a request to find all matches for the text in the web page."
  },
  {
    "name": "stopFindInPage",
    "description": "Stops any findInPage request for the webContents with the provided action.",
    "parameters": [
      {
        "name": "action",
        "type": "String",
        "collection": false,
        "description": "Specifies the action to take place when ending [`webContents.findInPage`] request.",
        "required": true,
        "possibleValues": [
          {
            "value": "clearSelection",
            "description": "Clear the selection."
          },
          {
            "value": "keepSelection",
            "description": "Translate the selection into a normal selection."
          },
          {
            "value": "activateSelection",
            "description": "Focus and click the selection node."
          }
        ]
      }
    ],
    "title": "contents.stopFindInPage(action)",
    "type": "instanceMethod",
    "tldr": "Stops any findInPage request for the webContents with the provided action.."
  },
  {
    "name": "capturePage",
    "description": "Captures a snapshot of the page within rect. Upon completion callback will be called with callback(image). The image is an instance of NativeImage that stores data of the snapshot. Omitting rect will capture the whole visible page.",
    "parameters": [
      {
        "name": "rect",
        "type": "Rectangle",
        "collection": false,
        "description": "The area of the page to be captured.",
        "required": false
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "image",
            "type": "NativeImage",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.capturePage([rect, ]callback)",
    "type": "instanceMethod",
    "tldr": "Captures a snapshot of the page within rect."
  },
  {
    "name": "hasServiceWorker",
    "description": "Checks if any ServiceWorker is registered and returns a boolean as response to callback.",
    "parameters": [
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "hasWorker",
            "type": "Boolean",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.hasServiceWorker(callback)",
    "type": "instanceMethod",
    "tldr": "Checks if any ServiceWorker is registered and returns a boolean as response to callback.."
  },
  {
    "name": "unregisterServiceWorker",
    "description": "Unregisters any ServiceWorker if present and returns a boolean as response to callback when the JS promise is fulfilled or false when the JS promise is rejected.",
    "parameters": [
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "success",
            "type": "Boolean",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.unregisterServiceWorker(callback)",
    "type": "instanceMethod",
    "tldr": "Unregisters any ServiceWorker if present and returns a boolean as response to callback when the JS promise is fulfilled or false when the JS promise is rejected.."
  },
  {
    "name": "getPrinters",
    "description": "Get the system printer list.",
    "returns": {
      "type": "PrinterInfo",
      "collection": true,
      "description": "."
    },
    "title": "contents.getPrinters()",
    "type": "instanceMethod",
    "tldr": "Get the system printer list.."
  },
  {
    "name": "print",
    "description": "Prints window's web page. When silent is set to true, Electron will pick the system's default printer if deviceName is empty and the default settings for printing. Calling window.print() in web page is equivalent to calling webContents.print({silent: false, printBackground: false, deviceName: ''}). Use page-break-before: always; CSS style to force to print to a new page.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "silent",
            "type": "Boolean",
            "collection": false,
            "description": "Don't ask user for print settings. Default is false.",
            "required": false
          },
          {
            "name": "printBackground",
            "type": "Boolean",
            "collection": false,
            "description": "Also prints the background color and image of the web page. Default is false.",
            "required": false
          },
          {
            "name": "deviceName",
            "type": "String",
            "collection": false,
            "description": "Set the printer device name to use. Default is ''.",
            "required": false
          }
        ]
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": false,
        "parameters": [
          {
            "name": "success",
            "type": "Boolean",
            "collection": false,
            "description": "Indicates success of the print call.",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.print([options], [callback])",
    "type": "instanceMethod",
    "tldr": "Prints window's web page."
  },
  {
    "name": "printToPDF",
    "description": "Prints window's web page as PDF with Chromium's preview printing custom settings. The callback will be called with callback(error, data) on completion. The data is a Buffer that contains the generated PDF data. The landscape will be ignored if @page CSS at-rule is used in the web page. By default, an empty options will be regarded as: Use page-break-before: always; CSS style to force to print to a new page. An example of webContents.printToPDF:",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "marginsType",
            "type": "Integer",
            "collection": false,
            "description": "Specifies the type of margins to use. Uses 0 for default margin, 1 for no margin, and 2 for minimum margin.",
            "required": false
          },
          {
            "name": "pageSize",
            "type": "String",
            "collection": false,
            "description": "Specify page size of the generated PDF. Can be A3, A4, A5, Legal, Letter, Tabloid or an Object containing height and width in microns.",
            "required": false
          },
          {
            "name": "printBackground",
            "type": "Boolean",
            "collection": false,
            "description": "Whether to print CSS backgrounds.",
            "required": false
          },
          {
            "name": "printSelectionOnly",
            "type": "Boolean",
            "collection": false,
            "description": "Whether to print selection only.",
            "required": false
          },
          {
            "name": "landscape",
            "type": "Boolean",
            "collection": false,
            "description": "true for landscape, false for portrait.",
            "required": false
          }
        ]
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "error",
            "type": "Error",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "data",
            "type": "Buffer",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.printToPDF(options, callback)",
    "type": "instanceMethod",
    "tldr": "Prints window's web page as PDF with Chromium's preview printing custom settings."
  },
  {
    "name": "addWorkSpace",
    "description": "Adds the specified path to DevTools workspace. Must be used after DevTools creation:",
    "parameters": [
      {
        "name": "path",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.addWorkSpace(path)",
    "type": "instanceMethod",
    "tldr": "Adds the specified path to DevTools workspace."
  },
  {
    "name": "removeWorkSpace",
    "description": "Removes the specified path from DevTools workspace.",
    "parameters": [
      {
        "name": "path",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.removeWorkSpace(path)",
    "type": "instanceMethod",
    "tldr": "Removes the specified path from DevTools workspace.."
  },
  {
    "name": "setDevToolsWebContents",
    "description": "Uses the devToolsWebContents as the target WebContents to show devtools. The devToolsWebContents must not have done any navigation, and it should not be used for other purposes after the call. By default Electron manages the devtools by creating an internal WebContents with native view, which developers have very limited control of. With the setDevToolsWebContents method, developers can use any WebContents to show the devtools in it, including BrowserWindow, BrowserView and <webview> tag. Note that closing the devtools does not destroy the devToolsWebContents, it is caller's responsibility to destroy devToolsWebContents. An example of showing devtools in a <webview> tag: An example of showing devtools in a BrowserWindow:",
    "parameters": [
      {
        "name": "devToolsWebContents",
        "type": "WebContents",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.setDevToolsWebContents(devToolsWebContents)",
    "type": "instanceMethod",
    "tldr": "Uses the devToolsWebContents as the target WebContents to show devtools."
  },
  {
    "name": "openDevTools",
    "description": "Opens the devtools. When contents is a <webview> tag, the mode would be detach by default, explicitly passing an empty mode can force using last used dock state.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "mode",
            "type": "String",
            "collection": false,
            "description": "Opens the devtools with specified dock state, can be right, bottom, undocked, detach. Defaults to last used dock state. In undocked mode it's possible to dock back. In detach mode it's not.",
            "required": true,
            "possibleValues": [
              {
                "value": "right"
              },
              {
                "value": "bottom"
              },
              {
                "value": "undocked"
              },
              {
                "value": "detach"
              }
            ]
          }
        ]
      }
    ],
    "title": "contents.openDevTools([options])",
    "type": "instanceMethod",
    "tldr": "Opens the devtools."
  },
  {
    "name": "closeDevTools",
    "description": "Closes the devtools.",
    "title": "contents.closeDevTools()",
    "type": "instanceMethod",
    "tldr": "Closes the devtools.."
  },
  {
    "name": "isDevToolsOpened",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the devtools is opened."
    },
    "title": "contents.isDevToolsOpened()",
    "type": "instanceMethod",
    "tldr": "Returns whether the devtools is opened."
  },
  {
    "name": "isDevToolsFocused",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Whether the devtools view is focused ."
    },
    "title": "contents.isDevToolsFocused()",
    "type": "instanceMethod",
    "tldr": "Returns whether the devtools view is focused ."
  },
  {
    "name": "toggleDevTools",
    "description": "Toggles the developer tools.",
    "title": "contents.toggleDevTools()",
    "type": "instanceMethod",
    "tldr": "Toggles the developer tools.."
  },
  {
    "name": "inspectElement",
    "description": "Starts inspecting element at position (x, y).",
    "parameters": [
      {
        "name": "x",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "y",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.inspectElement(x, y)",
    "type": "instanceMethod",
    "tldr": "Starts inspecting element at position (x, y).."
  },
  {
    "name": "inspectServiceWorker",
    "description": "Opens the developer tools for the service worker context.",
    "title": "contents.inspectServiceWorker()",
    "type": "instanceMethod",
    "tldr": "Opens the developer tools for the service worker context.."
  },
  {
    "name": "send",
    "description": "Send an asynchronous message to renderer process via channel, you can also send arbitrary arguments. Arguments will be serialized in JSON internally and hence no functions or prototype chain will be included. The renderer process can handle the message by listening to channel with the ipcRenderer module. An example of sending messages from the main process to the renderer process:",
    "parameters": [
      {
        "name": "channel",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "...args",
        "type": "any",
        "collection": true,
        "required": true
      }
    ],
    "title": "contents.send(channel[, arg1][, arg2][, ...])",
    "type": "instanceMethod",
    "tldr": "Send an asynchronous message to renderer process via channel, you can also send arbitrary arguments."
  },
  {
    "name": "enableDeviceEmulation",
    "description": "Enable device emulation with the given parameters.",
    "parameters": [
      {
        "name": "parameters",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "screenPosition",
            "type": "String",
            "collection": false,
            "description": "Specify the screen type to emulate (default: desktop):",
            "required": true,
            "possibleValues": [
              {
                "value": "desktop",
                "description": "Desktop screen type."
              },
              {
                "value": "mobile",
                "description": "Mobile screen type."
              }
            ]
          },
          {
            "name": "screenSize",
            "type": "Size",
            "collection": false,
            "description": "Set the emulated screen size (screenPosition == mobile).",
            "required": true
          },
          {
            "name": "viewPosition",
            "type": "Point",
            "collection": false,
            "description": "Position the view on the screen (screenPosition == mobile) (default: {x: 0, y: 0}).",
            "required": true
          },
          {
            "name": "deviceScaleFactor",
            "type": "Integer",
            "collection": false,
            "description": "Set the device scale factor (if zero defaults to original device scale factor) (default: 0).",
            "required": true
          },
          {
            "name": "viewSize",
            "type": "Size",
            "collection": false,
            "description": "Set the emulated view size (empty means no override)",
            "required": true
          },
          {
            "name": "scale",
            "type": "Float",
            "collection": false,
            "description": "Scale of emulated view inside available space (not in fit to view mode) (default: 1).",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.enableDeviceEmulation(parameters)",
    "type": "instanceMethod",
    "tldr": "Enable device emulation with the given parameters.."
  },
  {
    "name": "disableDeviceEmulation",
    "description": "Disable device emulation enabled by webContents.enableDeviceEmulation.",
    "title": "contents.disableDeviceEmulation()",
    "type": "instanceMethod",
    "tldr": "Disable device emulation enabled by webContents.enableDeviceEmulation.."
  },
  {
    "name": "sendInputEvent",
    "description": "Sends an input event to the page. Note: The BrowserWindow containing the contents needs to be focused for sendInputEvent() to work. For keyboard events, the event object also have following properties: For mouse events, the event object also have following properties: For the mouseWheel event, the event object also have following properties:",
    "parameters": [
      {
        "name": "event",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "type",
            "type": "String",
            "collection": false,
            "description": "() The type of the event, can be mouseDown, mouseUp, mouseEnter, mouseLeave, contextMenu, mouseWheel, mouseMove, keyDown, keyUp or char.",
            "required": true,
            "possibleValues": [
              {
                "value": "mouseDown"
              },
              {
                "value": "mouseUp"
              },
              {
                "value": "mouseEnter"
              },
              {
                "value": "mouseLeave"
              },
              {
                "value": "contextMenu"
              },
              {
                "value": "mouseWheel"
              },
              {
                "value": "mouseMove"
              },
              {
                "value": "keyDown"
              },
              {
                "value": "keyUp"
              },
              {
                "value": "char"
              }
            ]
          },
          {
            "name": "modifiers",
            "type": "String",
            "collection": true,
            "description": "An array of modifiers of the event, can include shift, control, alt, meta, isKeypad, isAutoRepeat, leftButtonDown, middleButtonDown, rightButtonDown, capsLock, numLock, left, right.",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.sendInputEvent(event)",
    "type": "instanceMethod",
    "tldr": "Sends an input event to the page."
  },
  {
    "name": "beginFrameSubscription",
    "description": "Begin subscribing for presentation events and captured frames, the callback will be called with callback(frameBuffer, dirtyRect) when there is a presentation event. The frameBuffer is a Buffer that contains raw pixel data. On most machines, the pixel data is effectively stored in 32bit BGRA format, but the actual representation depends on the endianness of the processor (most modern processors are little-endian, on machines with big-endian processors the data is in 32bit ARGB format). The dirtyRect is an object with x, y, width, height properties that describes which part of the page was repainted. If onlyDirty is set to true, frameBuffer will only contain the repainted area. onlyDirty defaults to false.",
    "parameters": [
      {
        "name": "onlyDirty",
        "type": "Boolean",
        "collection": false,
        "description": "Defaults to `false`.",
        "required": false
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "frameBuffer",
            "type": "Buffer",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "dirtyRect",
            "type": "Rectangle",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.beginFrameSubscription([onlyDirty ,]callback)",
    "type": "instanceMethod",
    "tldr": "Begin subscribing for presentation events and captured frames, the callback will be called with callback(frameBuffer, dirtyRect) when there is a presentation event."
  },
  {
    "name": "endFrameSubscription",
    "description": "End subscribing for frame presentation events.",
    "title": "contents.endFrameSubscription()",
    "type": "instanceMethod",
    "tldr": "End subscribing for frame presentation events.."
  },
  {
    "name": "startDrag",
    "description": "Sets the item as dragging item for current drag-drop operation, file is the absolute path of the file to be dragged, and icon is the image showing under the cursor when dragging.",
    "parameters": [
      {
        "name": "item",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "file",
            "type": "String",
            "collection": false,
            "description": "or files Array The path(s) to the file(s) being dragged.",
            "required": true
          },
          {
            "name": "icon",
            "type": "NativeImage",
            "collection": false,
            "description": "The image must be non-empty on macOS.",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.startDrag(item)",
    "type": "instanceMethod",
    "tldr": "Sets the item as dragging item for current drag-drop operation, file is the absolute path of the file to be dragged, and icon is the image showing under the cursor when dragging.."
  },
  {
    "name": "savePage",
    "parameters": [
      {
        "name": "fullPath",
        "type": "String",
        "collection": false,
        "description": "The full file path.",
        "required": true
      },
      {
        "name": "saveType",
        "type": "String",
        "collection": false,
        "description": "Specify the save type.",
        "required": true,
        "possibleValues": [
          {
            "value": "HTMLOnly",
            "description": "Save only the HTML of the page."
          },
          {
            "value": "HTMLComplete",
            "description": "Save complete-html page."
          },
          {
            "value": "MHTML",
            "description": "Save complete-html page as MHTML."
          }
        ]
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "description": "`(error) => {}`.",
        "required": true,
        "parameters": [
          {
            "name": "error",
            "type": "Error",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "true if the process of saving page has been initiated successfully."
    },
    "title": "contents.savePage(fullPath, saveType, callback)",
    "type": "instanceMethod",
    "tldr": "Returns true if the process of saving page has been initiated successfully."
  },
  {
    "name": "showDefinitionForSelection",
    "platforms": [
      "macOS"
    ],
    "description": "Shows pop-up dictionary that searches the selected word on the page.",
    "title": "contents.showDefinitionForSelection()",
    "type": "instanceMethod",
    "tldr": "Shows pop-up dictionary that searches the selected word on the page.."
  },
  {
    "name": "setSize",
    "description": "Set the size of the page. This is only supported for <webview> guest contents.",
    "parameters": [
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "normal",
            "type": "Object",
            "collection": false,
            "description": "Normal size of the page. This can be used in combination with the attribute to manually resize the webview guest contents.",
            "required": false,
            "properties": [
              {
                "name": "width",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "height",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              }
            ]
          }
        ]
      }
    ],
    "title": "contents.setSize(options)",
    "type": "instanceMethod",
    "tldr": "Set the size of the page."
  },
  {
    "name": "isOffscreen",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "Indicates whether offscreen rendering is enabled."
    },
    "title": "contents.isOffscreen()",
    "type": "instanceMethod",
    "tldr": "Returns indicates whether offscreen rendering is enabled."
  },
  {
    "name": "startPainting",
    "description": "If offscreen rendering is enabled and not painting, start painting.",
    "title": "contents.startPainting()",
    "type": "instanceMethod",
    "tldr": "If offscreen rendering is enabled and not painting, start painting.."
  },
  {
    "name": "stopPainting",
    "description": "If offscreen rendering is enabled and painting, stop painting.",
    "title": "contents.stopPainting()",
    "type": "instanceMethod",
    "tldr": "If offscreen rendering is enabled and painting, stop painting.."
  },
  {
    "name": "isPainting",
    "returns": {
      "type": "Boolean",
      "collection": false,
      "description": "If offscreen rendering is enabled returns whether it is currently painting."
    },
    "title": "contents.isPainting()",
    "type": "instanceMethod",
    "tldr": "Returns if offscreen rendering is enabled returns whether it is currently painting."
  },
  {
    "name": "setFrameRate",
    "description": "If offscreen rendering is enabled sets the frame rate to the specified number. Only values between 1 and 60 are accepted.",
    "parameters": [
      {
        "name": "fps",
        "type": "Integer",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.setFrameRate(fps)",
    "type": "instanceMethod",
    "tldr": "If offscreen rendering is enabled sets the frame rate to the specified number."
  },
  {
    "name": "getFrameRate",
    "returns": {
      "type": "Integer",
      "collection": false,
      "description": "If offscreen rendering is enabled returns the current frame rate."
    },
    "title": "contents.getFrameRate()",
    "type": "instanceMethod",
    "tldr": "Returns if offscreen rendering is enabled returns the current frame rate."
  },
  {
    "name": "invalidate",
    "description": "Schedules a full repaint of the window this web contents is in. If offscreen rendering is enabled invalidates the frame and generates a new one through the 'paint' event.",
    "title": "contents.invalidate()",
    "type": "instanceMethod",
    "tldr": "Schedules a full repaint of the window this web contents is in."
  },
  {
    "name": "getWebRTCIPHandlingPolicy",
    "returns": {
      "type": "String",
      "collection": false,
      "description": "Returns the WebRTC IP Handling Policy."
    },
    "title": "contents.getWebRTCIPHandlingPolicy()",
    "type": "instanceMethod",
    "tldr": "Returns returns the WebRTC IP Handling Policy."
  },
  {
    "name": "setWebRTCIPHandlingPolicy",
    "description": "Setting the WebRTC IP handling policy allows you to control which IPs are exposed via WebRTC. See BrowserLeaks for more details.",
    "parameters": [
      {
        "name": "policy",
        "type": "String",
        "collection": false,
        "description": "Specify the WebRTC IP Handling Policy.",
        "required": true,
        "possibleValues": [
          {
            "value": "default",
            "description": "Exposes user's public and local IPs. This is the default behavior. When this policy is used, WebRTC has the right to enumerate all interfaces and bind them to discover public interfaces."
          },
          {
            "value": "default_public_interface_only",
            "description": "Exposes user's public IP, but does not expose user's local IP. When this policy is used, WebRTC should only use the default route used by http. This doesn't expose any local addresses."
          },
          {
            "value": "default_public_and_private_interfaces",
            "description": "Exposes user's public and local IPs. When this policy is used, WebRTC should only use the default route used by http. This also exposes the associated default private address. Default route is the route chosen by the OS on a multi-homed endpoint."
          },
          {
            "value": "disable_non_proxied_udp",
            "description": "Does not expose public or local IPs. When this policy is used, WebRTC should only use TCP to contact peers or servers unless the proxy server supports UDP."
          }
        ]
      }
    ],
    "title": "contents.setWebRTCIPHandlingPolicy(policy)",
    "type": "instanceMethod",
    "tldr": "Setting the WebRTC IP handling policy allows you to control which IPs are exposed via WebRTC."
  },
  {
    "name": "getOSProcessId",
    "returns": {
      "type": "Integer",
      "collection": false,
      "description": "The pid of the associated renderer process."
    },
    "title": "contents.getOSProcessId()",
    "type": "instanceMethod",
    "tldr": "Returns the pid of the associated renderer process."
  },
  {
    "name": "did-finish-load",
    "description": "Emitted when the navigation is done, i.e. the spinner of the tab has stopped spinning, and the onload event was dispatched.",
    "title": "contents.on('did-finish-load')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-finish-load",
    "tldr": "Emitted when the navigation is done, i.e."
  },
  {
    "name": "did-fail-load",
    "description": "This event is like did-finish-load but emitted when the load failed or was cancelled, e.g. window.stop() is invoked. The full list of error codes and their meaning is available here.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "errorCode",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "errorDescription",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "validatedURL",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "isMainFrame",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('did-fail-load')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-fail-load",
    "tldr": "This event is like did-finish-load but emitted when the load failed or was cancelled, e.g."
  },
  {
    "name": "did-frame-finish-load",
    "description": "Emitted when a frame has done navigation.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "isMainFrame",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('did-frame-finish-load')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-frame-finish-load",
    "tldr": "Emitted when a frame has done navigation.."
  },
  {
    "name": "did-start-loading",
    "description": "Corresponds to the points in time when the spinner of the tab started spinning.",
    "title": "contents.on('did-start-loading')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-start-loading",
    "tldr": "Corresponds to the points in time when the spinner of the tab started spinning.."
  },
  {
    "name": "did-stop-loading",
    "description": "Corresponds to the points in time when the spinner of the tab stopped spinning.",
    "title": "contents.on('did-stop-loading')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-stop-loading",
    "tldr": "Corresponds to the points in time when the spinner of the tab stopped spinning.."
  },
  {
    "name": "did-get-response-details",
    "description": "Emitted when details regarding a requested resource are available. status indicates the socket connection to download the resource.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "status",
        "type": "Boolean",
        "collection": false,
        "required": true
      },
      {
        "name": "newURL",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "originalURL",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "httpResponseCode",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "requestMethod",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "referrer",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "headers",
        "type": "Object",
        "collection": false,
        "required": true
      },
      {
        "name": "resourceType",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('did-get-response-details')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-get-response-details",
    "tldr": "Emitted when details regarding a requested resource are available."
  },
  {
    "name": "did-get-redirect-request",
    "description": "Emitted when a redirect is received while requesting a resource.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "oldURL",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "newURL",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "isMainFrame",
        "type": "Boolean",
        "collection": false,
        "required": true
      },
      {
        "name": "httpResponseCode",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "requestMethod",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "referrer",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "headers",
        "type": "Object",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('did-get-redirect-request')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-get-redirect-request",
    "tldr": "Emitted when a redirect is received while requesting a resource.."
  },
  {
    "name": "dom-ready",
    "description": "Emitted when the document in the given frame is loaded.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('dom-ready')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-dom-ready",
    "tldr": "Emitted when the document in the given frame is loaded.."
  },
  {
    "name": "page-favicon-updated",
    "description": "Emitted when page receives favicon urls.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "favicons",
        "type": "String",
        "collection": true,
        "description": "Array of URLs.",
        "required": true
      }
    ],
    "title": "contents.on('page-favicon-updated')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-page-favicon-updated",
    "tldr": "Emitted when page receives favicon urls.."
  },
  {
    "name": "new-window",
    "description": "Emitted when the page requests to open a new window for a url. It could be requested by window.open or an external link like <a target='_blank'>. By default a new BrowserWindow will be created for the url. Calling event.preventDefault() will prevent Electron from automatically creating a new BrowserWindow. If you call event.preventDefault() and manually create a new BrowserWindow then you must set event.newGuest to reference the new BrowserWindow instance, failing to do so may result in unexpected behavior. For example:",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "frameName",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "disposition",
        "type": "String",
        "collection": false,
        "description": "Can be `default`, `foreground-tab`, `background-tab`, `new-window`, `save-to-disk` and `other`.",
        "required": true,
        "possibleValues": [
          {
            "value": "default"
          },
          {
            "value": "foreground-tab"
          },
          {
            "value": "background-tab"
          },
          {
            "value": "new-window"
          },
          {
            "value": "save-to-disk"
          },
          {
            "value": "other"
          }
        ]
      },
      {
        "name": "options",
        "type": "Object",
        "collection": false,
        "description": "The options which will be used for creating the new .",
        "required": true
      },
      {
        "name": "additionalFeatures",
        "type": "String",
        "collection": true,
        "description": "The non-standard features (features not handled by Chromium or Electron) given to `window.open()`.",
        "required": true
      }
    ],
    "title": "contents.on('new-window')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-new-window",
    "tldr": "Emitted when the page requests to open a new window for a url."
  },
  {
    "name": "will-navigate",
    "description": "Emitted when a user or the page wants to start navigation. It can happen when the window.location object is changed or a user clicks a link in the page. This event will not emit when the navigation is started programmatically with APIs like webContents.loadURL and webContents.back. It is also not emitted for in-page navigations, such as clicking anchor links or updating the window.location.hash. Use did-navigate-in-page event for this purpose. Calling event.preventDefault() will prevent the navigation.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('will-navigate')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-will-navigate",
    "tldr": "Emitted when a user or the page wants to start navigation."
  },
  {
    "name": "did-navigate",
    "description": "Emitted when a navigation is done. This event is not emitted for in-page navigations, such as clicking anchor links or updating the window.location.hash. Use did-navigate-in-page event for this purpose.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('did-navigate')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-navigate",
    "tldr": "Emitted when a navigation is done."
  },
  {
    "name": "did-navigate-in-page",
    "description": "Emitted when an in-page navigation happened. When in-page navigation happens, the page URL changes but does not cause navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM hashchange event is triggered.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "isMainFrame",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('did-navigate-in-page')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-navigate-in-page",
    "tldr": "Emitted when an in-page navigation happened."
  },
  {
    "name": "will-prevent-unload",
    "description": "Emitted when a beforeunload event handler is attempting to cancel a page unload. Calling event.preventDefault() will ignore the beforeunload event handler and allow the page to be unloaded.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('will-prevent-unload')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-will-prevent-unload",
    "tldr": "Emitted when a beforeunload event handler is attempting to cancel a page unload."
  },
  {
    "name": "crashed",
    "description": "Emitted when the renderer process crashes or is killed.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "killed",
        "type": "Boolean",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('crashed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-crashed",
    "tldr": "Emitted when the renderer process crashes or is killed.."
  },
  {
    "name": "plugin-crashed",
    "description": "Emitted when a plugin process has crashed.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "name",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "version",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('plugin-crashed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-plugin-crashed",
    "tldr": "Emitted when a plugin process has crashed.."
  },
  {
    "name": "destroyed",
    "description": "Emitted when webContents is destroyed.",
    "title": "contents.on('destroyed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-destroyed",
    "tldr": "Emitted when webContents is destroyed.."
  },
  {
    "name": "before-input-event",
    "description": "Emitted before dispatching the keydown and keyup events in the page. Calling event.preventDefault will prevent the page keydown/keyup events and the menu shortcuts. To only prevent the menu shortcuts, use setIgnoreMenuShortcuts:",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "input",
        "type": "Object",
        "collection": false,
        "description": "Input properties.",
        "required": true,
        "properties": [
          {
            "name": "type",
            "type": "String",
            "collection": false,
            "description": "Either keyUp or keyDown.",
            "required": true
          },
          {
            "name": "key",
            "type": "String",
            "collection": false,
            "description": "Equivalent to .",
            "required": true
          },
          {
            "name": "code",
            "type": "String",
            "collection": false,
            "description": "Equivalent to .",
            "required": true
          },
          {
            "name": "isAutoRepeat",
            "type": "Boolean",
            "collection": false,
            "description": "Equivalent to .",
            "required": true
          },
          {
            "name": "shift",
            "type": "Boolean",
            "collection": false,
            "description": "Equivalent to .",
            "required": true
          },
          {
            "name": "control",
            "type": "Boolean",
            "collection": false,
            "description": "Equivalent to .",
            "required": true
          },
          {
            "name": "alt",
            "type": "Boolean",
            "collection": false,
            "description": "Equivalent to .",
            "required": true
          },
          {
            "name": "meta",
            "type": "Boolean",
            "collection": false,
            "description": "Equivalent to .",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.on('before-input-event')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-before-input-event",
    "tldr": "Emitted before dispatching the keydown and keyup events in the page."
  },
  {
    "name": "devtools-opened",
    "description": "Emitted when DevTools is opened.",
    "title": "contents.on('devtools-opened')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-devtools-opened",
    "tldr": "Emitted when DevTools is opened.."
  },
  {
    "name": "devtools-closed",
    "description": "Emitted when DevTools is closed.",
    "title": "contents.on('devtools-closed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-devtools-closed",
    "tldr": "Emitted when DevTools is closed.."
  },
  {
    "name": "devtools-focused",
    "description": "Emitted when DevTools is focused / opened.",
    "title": "contents.on('devtools-focused')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-devtools-focused",
    "tldr": "Emitted when DevTools is focused / opened.."
  },
  {
    "name": "certificate-error",
    "description": "Emitted when failed to verify the certificate for url. The usage is the same with the certificate-error event of app.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "error",
        "type": "String",
        "collection": false,
        "description": "The error code.",
        "required": true
      },
      {
        "name": "certificate",
        "type": "Certificate",
        "collection": false,
        "required": true
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "isTrusted",
            "type": "Boolean",
            "collection": false,
            "description": "Indicates whether the certificate can be considered trusted.",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.on('certificate-error')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-certificate-error",
    "tldr": "Emitted when failed to verify the certificate for url."
  },
  {
    "name": "select-client-certificate",
    "description": "Emitted when a client certificate is requested. The usage is the same with the select-client-certificate event of app.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "url",
        "type": "URL",
        "collection": false,
        "required": true
      },
      {
        "name": "certificateList",
        "type": "Certificate",
        "collection": true,
        "required": true
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "certificate",
            "type": "Certificate",
            "collection": false,
            "description": "Must be a certificate from the given list.",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.on('select-client-certificate')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-select-client-certificate",
    "tldr": "Emitted when a client certificate is requested."
  },
  {
    "name": "login",
    "description": "Emitted when webContents wants to do basic auth. The usage is the same with the login event of app.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "request",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "method",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "url",
            "type": "URL",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "referrer",
            "type": "URL",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      },
      {
        "name": "authInfo",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "isProxy",
            "type": "Boolean",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "scheme",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "host",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "port",
            "type": "Integer",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "realm",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "username",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "password",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.on('login')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-login",
    "tldr": "Emitted when webContents wants to do basic auth."
  },
  {
    "name": "found-in-page",
    "description": "Emitted when a result is available for [webContents.findInPage] request.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "result",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "requestId",
            "type": "Integer",
            "collection": false,
            "description": "",
            "required": true
          },
          {
            "name": "activeMatchOrdinal",
            "type": "Integer",
            "collection": false,
            "description": "Position of the active match.",
            "required": true
          },
          {
            "name": "matches",
            "type": "Integer",
            "collection": false,
            "description": "Number of Matches.",
            "required": true
          },
          {
            "name": "selectionArea",
            "type": "Object",
            "collection": false,
            "description": "Coordinates of first match region.",
            "required": true,
            "properties": []
          },
          {
            "name": "finalUpdate",
            "type": "Boolean",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.on('found-in-page')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-found-in-page",
    "tldr": "Emitted when a result is available for [webContents.findInPage] request.."
  },
  {
    "name": "media-started-playing",
    "description": "Emitted when media starts playing.",
    "title": "contents.on('media-started-playing')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-media-started-playing",
    "tldr": "Emitted when media starts playing.."
  },
  {
    "name": "media-paused",
    "description": "Emitted when media is paused or done playing.",
    "title": "contents.on('media-paused')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-media-paused",
    "tldr": "Emitted when media is paused or done playing.."
  },
  {
    "name": "did-change-theme-color",
    "description": "Emitted when a page's theme color changes. This is usually due to encountering a meta tag:",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "color",
        "type": [
          {
            "typeName": "String",
            "collection": false
          },
          {
            "typeName": "null",
            "collection": false
          }
        ],
        "collection": false,
        "description": "Theme color is in format of '#rrggbb'. It is `null` when no theme color is set.",
        "required": true
      }
    ],
    "title": "contents.on('did-change-theme-color')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-change-theme-color",
    "tldr": "Emitted when a page's theme color changes."
  },
  {
    "name": "update-target-url",
    "description": "Emitted when mouse moves over a link or the keyboard moves the focus to a link.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "url",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('update-target-url')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-update-target-url",
    "tldr": "Emitted when mouse moves over a link or the keyboard moves the focus to a link.."
  },
  {
    "name": "cursor-changed",
    "description": "Emitted when the cursor's type changes. The type parameter can be default, crosshair, pointer, text, wait, help, e-resize, n-resize, ne-resize, nw-resize, s-resize, se-resize, sw-resize, w-resize, ns-resize, ew-resize, nesw-resize, nwse-resize, col-resize, row-resize, m-panning, e-panning, n-panning, ne-panning, nw-panning, s-panning, se-panning, sw-panning, w-panning, move, vertical-text, cell, context-menu, alias, progress, nodrop, copy, none, not-allowed, zoom-in, zoom-out, grab, grabbing or custom. If the type parameter is custom, the image parameter will hold the custom cursor image in a NativeImage, and scale, size and hotspot will hold additional information about the custom cursor.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "type",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "image",
        "type": "NativeImage",
        "collection": false,
        "required": false
      },
      {
        "name": "scale",
        "type": "Float",
        "collection": false,
        "description": "scaling factor for the custom cursor.",
        "required": false
      },
      {
        "name": "size",
        "type": "Size",
        "collection": false,
        "description": "the size of the `image`.",
        "required": false
      },
      {
        "name": "hotspot",
        "type": "Point",
        "collection": false,
        "description": "coordinates of the custom cursor's hotspot.",
        "required": false
      }
    ],
    "title": "contents.on('cursor-changed')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-cursor-changed",
    "tldr": "Emitted when the cursor's type changes."
  },
  {
    "name": "context-menu",
    "description": "Emitted when there is a new context menu that needs to be handled.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "params",
        "type": "Object",
        "collection": false,
        "required": true,
        "properties": [
          {
            "name": "x",
            "type": "Integer",
            "collection": false,
            "description": "x coordinate.",
            "required": true
          },
          {
            "name": "y",
            "type": "Integer",
            "collection": false,
            "description": "y coordinate.",
            "required": true
          },
          {
            "name": "linkURL",
            "type": "String",
            "collection": false,
            "description": "URL of the link that encloses the node the context menu was invoked on.",
            "required": true
          },
          {
            "name": "linkText",
            "type": "String",
            "collection": false,
            "description": "Text associated with the link. May be an empty string if the contents of the link are an image.",
            "required": true
          },
          {
            "name": "pageURL",
            "type": "String",
            "collection": false,
            "description": "URL of the top level page that the context menu was invoked on.",
            "required": true
          },
          {
            "name": "frameURL",
            "type": "String",
            "collection": false,
            "description": "URL of the subframe that the context menu was invoked on.",
            "required": true
          },
          {
            "name": "srcURL",
            "type": "String",
            "collection": false,
            "description": "Source URL for the element that the context menu was invoked on. Elements with source URLs are images, audio and video.",
            "required": true
          },
          {
            "name": "mediaType",
            "type": "String",
            "collection": false,
            "description": "Type of the node the context menu was invoked on. Can be none, image, audio, video, canvas, file or plugin.",
            "required": true,
            "possibleValues": [
              {
                "value": "none"
              },
              {
                "value": "image"
              },
              {
                "value": "audio"
              },
              {
                "value": "video"
              },
              {
                "value": "canvas"
              },
              {
                "value": "file"
              },
              {
                "value": "plugin"
              }
            ]
          },
          {
            "name": "hasImageContents",
            "type": "Boolean",
            "collection": false,
            "description": "Whether the context menu was invoked on an image which has non-empty contents.",
            "required": true
          },
          {
            "name": "isEditable",
            "type": "Boolean",
            "collection": false,
            "description": "Whether the context is editable.",
            "required": true
          },
          {
            "name": "selectionText",
            "type": "String",
            "collection": false,
            "description": "Text of the selection that the context menu was invoked on.",
            "required": true
          },
          {
            "name": "titleText",
            "type": "String",
            "collection": false,
            "description": "Title or alt text of the selection that the context was invoked on.",
            "required": true
          },
          {
            "name": "misspelledWord",
            "type": "String",
            "collection": false,
            "description": "The misspelled word under the cursor, if any.",
            "required": true
          },
          {
            "name": "frameCharset",
            "type": "String",
            "collection": false,
            "description": "The character encoding of the frame on which the menu was invoked.",
            "required": true
          },
          {
            "name": "inputFieldType",
            "type": "String",
            "collection": false,
            "description": "If the context menu was invoked on an input field, the type of that field. Possible values are none, plainText, password, other.",
            "required": true
          },
          {
            "name": "menuSourceType",
            "type": "String",
            "collection": false,
            "description": "Input source that invoked the context menu. Can be none, mouse, keyboard, touch or touchMenu.",
            "required": true,
            "possibleValues": [
              {
                "value": "none"
              },
              {
                "value": "mouse"
              },
              {
                "value": "keyboard"
              },
              {
                "value": "touch"
              },
              {
                "value": "touchMenu"
              }
            ]
          },
          {
            "name": "mediaFlags",
            "type": "Object",
            "collection": false,
            "description": "The flags for the media element the context menu was invoked on.",
            "required": true,
            "properties": [
              {
                "name": "inError",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the media element has crashed.",
                "required": true
              },
              {
                "name": "isPaused",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the media element is paused.",
                "required": true
              },
              {
                "name": "isMuted",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the media element is muted.",
                "required": true
              },
              {
                "name": "hasAudio",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the media element has audio.",
                "required": true
              },
              {
                "name": "isLooping",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the media element is looping.",
                "required": true
              },
              {
                "name": "isControlsVisible",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the media element's controls are visible.",
                "required": true
              },
              {
                "name": "canToggleControls",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the media element's controls are toggleable.",
                "required": true
              },
              {
                "name": "canRotate",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the media element can be rotated.",
                "required": true
              }
            ]
          },
          {
            "name": "editFlags",
            "type": "Object",
            "collection": false,
            "description": "These flags indicate whether the renderer believes it is able to perform the corresponding action.",
            "required": true,
            "properties": [
              {
                "name": "canUndo",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the renderer believes it can undo.",
                "required": true
              },
              {
                "name": "canRedo",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the renderer believes it can redo.",
                "required": true
              },
              {
                "name": "canCut",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the renderer believes it can cut.",
                "required": true
              },
              {
                "name": "canCopy",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the renderer believes it can copy",
                "required": true
              },
              {
                "name": "canPaste",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the renderer believes it can paste.",
                "required": true
              },
              {
                "name": "canDelete",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the renderer believes it can delete.",
                "required": true
              },
              {
                "name": "canSelectAll",
                "type": "Boolean",
                "collection": false,
                "description": "Whether the renderer believes it can select all.",
                "required": true
              }
            ]
          }
        ]
      }
    ],
    "title": "contents.on('context-menu')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-context-menu",
    "tldr": "Emitted when there is a new context menu that needs to be handled.."
  },
  {
    "name": "select-bluetooth-device",
    "description": "Emitted when bluetooth device needs to be selected on call to navigator.bluetooth.requestDevice. To use navigator.bluetooth api webBluetooth should be enabled. If event.preventDefault is not called, first available device will be selected. callback should be called with deviceId to be selected, passing empty string to callback will cancel the request.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "devices",
        "type": "BluetoothDevice",
        "collection": true,
        "required": true
      },
      {
        "name": "callback",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "deviceId",
            "type": "String",
            "collection": false,
            "description": "",
            "required": true
          }
        ]
      }
    ],
    "title": "contents.on('select-bluetooth-device')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-select-bluetooth-device",
    "tldr": "Emitted when bluetooth device needs to be selected on call to navigator.bluetooth.requestDevice."
  },
  {
    "name": "paint",
    "description": "Emitted when a new frame is generated. Only the dirty area is passed in the buffer.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "dirtyRect",
        "type": "Rectangle",
        "collection": false,
        "required": true
      },
      {
        "name": "image",
        "type": "NativeImage",
        "collection": false,
        "description": "The image data of the whole frame.",
        "required": true
      }
    ],
    "title": "contents.on('paint')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-paint",
    "tldr": "Emitted when a new frame is generated."
  },
  {
    "name": "devtools-reload-page",
    "description": "Emitted when the devtools window instructs the webContents to reload",
    "title": "contents.on('devtools-reload-page')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-devtools-reload-page",
    "tldr": "Emitted when the devtools window instructs the webContents to reload."
  },
  {
    "name": "will-attach-webview",
    "description": "Emitted when a <webview>'s web contents is being attached to this web contents. Calling event.preventDefault() will destroy the guest page. This event can be used to configure webPreferences for the webContents of a <webview> before it's loaded, and provides the ability to set settings that can't be set via <webview> attributes. Note: The specified preload script option will be appear as preloadURL (not preload) in the webPreferences object emitted with this event.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "webPreferences",
        "type": "Object",
        "collection": false,
        "description": "The web preferences that will be used by the guest page. This object can be modified to adjust the preferences for the guest page.",
        "required": true
      },
      {
        "name": "params",
        "type": "Object",
        "collection": false,
        "description": "The other `<webview>` parameters such as the `src` URL. This object can be modified to adjust the parameters of the guest page.",
        "required": true
      }
    ],
    "title": "contents.on('will-attach-webview')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-will-attach-webview",
    "tldr": "Emitted when a <webview>'s web contents is being attached to this web contents."
  },
  {
    "name": "did-attach-webview",
    "description": "Emitted when a <webview> has been attached to this web contents.",
    "returns": [
      {
        "name": "event",
        "type": "Event",
        "collection": false,
        "required": true
      },
      {
        "name": "webContents",
        "type": "WebContents",
        "collection": false,
        "description": "The guest web contents that is used by the `<webview>`.",
        "required": true
      }
    ],
    "title": "contents.on('did-attach-webview')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-did-attach-webview",
    "tldr": "Emitted when a <webview> has been attached to this web contents.."
  },
  {
    "name": "console-message",
    "description": "Emitted when the associated window logs a console message. Will not be emitted for windows with offscreen rendering enabled.",
    "returns": [
      {
        "name": "level",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "message",
        "type": "String",
        "collection": false,
        "required": true
      },
      {
        "name": "line",
        "type": "Integer",
        "collection": false,
        "required": true
      },
      {
        "name": "sourceId",
        "type": "String",
        "collection": false,
        "required": true
      }
    ],
    "title": "contents.on('console-message')",
    "type": "event",
    "url": "https://electronjs.org/docs/api/web-contents#event-console-message",
    "tldr": "Emitted when the associated window logs a console message."
  },
  {
    "name": "onBeforeRequest",
    "description": "The listener will be called with listener(details, callback) when a request is about to occur. The uploadData is an array of UploadData objects. The callback has to be called with an response object.",
    "parameters": [
      {
        "name": "filter",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "urls",
            "type": "String",
            "collection": true,
            "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
            "required": true
          }
        ]
      },
      {
        "name": "listener",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "details",
            "type": "Object",
            "collection": false,
            "description": "",
            "required": true,
            "properties": [
              {
                "name": "id",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "url",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "method",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "webContentsId",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": false
              },
              {
                "name": "resourceType",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "timestamp",
                "type": "Double",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "uploadData",
                "type": "UploadData",
                "collection": true,
                "description": "",
                "required": true
              }
            ]
          },
          {
            "name": "callback",
            "type": "Function",
            "collection": false,
            "description": "",
            "required": true,
            "parameters": [
              {
                "name": "response",
                "type": "Object",
                "collection": false,
                "description": "",
                "required": true,
                "properties": [
                  {
                    "name": "cancel",
                    "type": "Boolean",
                    "collection": false,
                    "description": "",
                    "required": false
                  },
                  {
                    "name": "redirectURL",
                    "type": "String",
                    "collection": false,
                    "description": "The original request is prevented from being sent or completed and is instead redirected to the given URL.",
                    "required": false
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "title": "webRequest.onBeforeRequest([filter, ]listener)",
    "type": "instanceMethod",
    "tldr": "The listener will be called with listener(details, callback) when a request is about to occur."
  },
  {
    "name": "onBeforeSendHeaders",
    "description": "The listener will be called with listener(details, callback) before sending an HTTP request, once the request headers are available. This may occur after a TCP connection is made to the server, but before any http data is sent. The callback has to be called with an response object.",
    "parameters": [
      {
        "name": "filter",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "urls",
            "type": "String",
            "collection": true,
            "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
            "required": true
          }
        ]
      },
      {
        "name": "listener",
        "type": "Function",
        "collection": false,
        "required": true
      }
    ],
    "title": "webRequest.onBeforeSendHeaders([filter, ]listener)",
    "type": "instanceMethod",
    "tldr": "The listener will be called with listener(details, callback) before sending an HTTP request, once the request headers are available."
  },
  {
    "name": "onSendHeaders",
    "description": "The listener will be called with listener(details) just before a request is going to be sent to the server, modifications of previous onBeforeSendHeaders response are visible by the time this listener is fired.",
    "parameters": [
      {
        "name": "filter",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "urls",
            "type": "String",
            "collection": true,
            "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
            "required": true
          }
        ]
      },
      {
        "name": "listener",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "details",
            "type": "Object",
            "collection": false,
            "description": "",
            "required": true,
            "properties": [
              {
                "name": "id",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "url",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "method",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "webContentsId",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": false
              },
              {
                "name": "resourceType",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "timestamp",
                "type": "Double",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "requestHeaders",
                "type": "Object",
                "collection": false,
                "description": "",
                "required": true,
                "properties": []
              }
            ]
          }
        ]
      }
    ],
    "title": "webRequest.onSendHeaders([filter, ]listener)",
    "type": "instanceMethod",
    "tldr": "The listener will be called with listener(details) just before a request is going to be sent to the server, modifications of previous onBeforeSendHeaders response are visible by the time this listener is fired.."
  },
  {
    "name": "onHeadersReceived",
    "description": "The listener will be called with listener(details, callback) when HTTP response headers of a request have been received. The callback has to be called with an response object.",
    "parameters": [
      {
        "name": "filter",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "urls",
            "type": "String",
            "collection": true,
            "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
            "required": true
          }
        ]
      },
      {
        "name": "listener",
        "type": "Function",
        "collection": false,
        "required": true
      }
    ],
    "title": "webRequest.onHeadersReceived([filter, ]listener)",
    "type": "instanceMethod",
    "tldr": "The listener will be called with listener(details, callback) when HTTP response headers of a request have been received."
  },
  {
    "name": "onResponseStarted",
    "description": "The listener will be called with listener(details) when first byte of the response body is received. For HTTP requests, this means that the status line and response headers are available.",
    "parameters": [
      {
        "name": "filter",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "urls",
            "type": "String",
            "collection": true,
            "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
            "required": true
          }
        ]
      },
      {
        "name": "listener",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "details",
            "type": "Object",
            "collection": false,
            "description": "",
            "required": true,
            "properties": [
              {
                "name": "id",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "url",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "method",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "webContentsId",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": false
              },
              {
                "name": "resourceType",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "timestamp",
                "type": "Double",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "responseHeaders",
                "type": "Object",
                "collection": false,
                "description": "",
                "required": true,
                "properties": []
              },
              {
                "name": "fromCache",
                "type": "Boolean",
                "collection": false,
                "description": "Indicates whether the response was fetched from disk cache.",
                "required": true
              },
              {
                "name": "statusCode",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "statusLine",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              }
            ]
          }
        ]
      }
    ],
    "title": "webRequest.onResponseStarted([filter, ]listener)",
    "type": "instanceMethod",
    "tldr": "The listener will be called with listener(details) when first byte of the response body is received."
  },
  {
    "name": "onBeforeRedirect",
    "description": "The listener will be called with listener(details) when a server initiated redirect is about to occur.",
    "parameters": [
      {
        "name": "filter",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "urls",
            "type": "String",
            "collection": true,
            "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
            "required": true
          }
        ]
      },
      {
        "name": "listener",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "details",
            "type": "Object",
            "collection": false,
            "description": "",
            "required": true,
            "properties": [
              {
                "name": "id",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "url",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "method",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "webContentsId",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": false
              },
              {
                "name": "resourceType",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "timestamp",
                "type": "Double",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "redirectURL",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "statusCode",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "ip",
                "type": "String",
                "collection": false,
                "description": "The server IP address that the request was actually sent to.",
                "required": false
              },
              {
                "name": "fromCache",
                "type": "Boolean",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "responseHeaders",
                "type": "Object",
                "collection": false,
                "description": "",
                "required": true,
                "properties": []
              }
            ]
          }
        ]
      }
    ],
    "title": "webRequest.onBeforeRedirect([filter, ]listener)",
    "type": "instanceMethod",
    "tldr": "The listener will be called with listener(details) when a server initiated redirect is about to occur.."
  },
  {
    "name": "onCompleted",
    "description": "The listener will be called with listener(details) when a request is completed.",
    "parameters": [
      {
        "name": "filter",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "urls",
            "type": "String",
            "collection": true,
            "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
            "required": true
          }
        ]
      },
      {
        "name": "listener",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "details",
            "type": "Object",
            "collection": false,
            "description": "",
            "required": true,
            "properties": [
              {
                "name": "id",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "url",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "method",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "webContentsId",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": false
              },
              {
                "name": "resourceType",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "timestamp",
                "type": "Double",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "responseHeaders",
                "type": "Object",
                "collection": false,
                "description": "",
                "required": true,
                "properties": []
              },
              {
                "name": "fromCache",
                "type": "Boolean",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "statusCode",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "statusLine",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              }
            ]
          }
        ]
      }
    ],
    "title": "webRequest.onCompleted([filter, ]listener)",
    "type": "instanceMethod",
    "tldr": "The listener will be called with listener(details) when a request is completed.."
  },
  {
    "name": "onErrorOccurred",
    "description": "The listener will be called with listener(details) when an error occurs.",
    "parameters": [
      {
        "name": "filter",
        "type": "Object",
        "collection": false,
        "required": false,
        "properties": [
          {
            "name": "urls",
            "type": "String",
            "collection": true,
            "description": "Array of URL patterns that will be used to filter out the requests that do not match the URL patterns.",
            "required": true
          }
        ]
      },
      {
        "name": "listener",
        "type": "Function",
        "collection": false,
        "required": true,
        "parameters": [
          {
            "name": "details",
            "type": "Object",
            "collection": false,
            "description": "",
            "required": true,
            "properties": [
              {
                "name": "id",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "url",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "method",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "webContentsId",
                "type": "Integer",
                "collection": false,
                "description": "",
                "required": false
              },
              {
                "name": "resourceType",
                "type": "String",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "timestamp",
                "type": "Double",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "fromCache",
                "type": "Boolean",
                "collection": false,
                "description": "",
                "required": true
              },
              {
                "name": "error",
                "type": "String",
                "collection": false,
                "description": "The error description.",
                "required": true
              }
            ]
          }
        ]
      }
    ],
    "title": "webRequest.onErrorOccurred([filter, ]listener)",
    "type": "instanceMethod",
    "tldr": "The listener will be called with listener(details) when an error occurs.."
  }
]